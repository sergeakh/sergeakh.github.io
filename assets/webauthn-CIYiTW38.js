async function u(){const e=await fetch("/api/challenge",{method:"post"});if(e.status!==200)throw new Error;return(await e.json()).challenge}async function d(){const e=await fetch("/api/serverKey",{method:"post"});if(e.status!==200)throw new Error;return(await e.json()).serverKey}function o(e){const t=String.fromCharCode(...new Uint8Array(e));return window.btoa(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}function s(e){let t=e.replace(/-/g,"+").replace(/_/g,"/");const a=t.length%4;return a&&(t+="=".repeat(4-a)),t}function c(e){try{const t=atob(e),a=new Uint8Array(t.length);for(let r=0;r<t.length;r++)a[r]=t.charCodeAt(r);return a.buffer}catch(t){throw t}}function p(e){const t=s(e);return c(t)}const y=async({challenge:e,clientKey:t})=>{const a=Math.floor(Math.random()*100),r={challenge:c(s(e)),rp:{id:"localhost",name:"notes"},user:{id:new Uint8Array([...t,...crypto.getRandomValues(new Uint8Array(16))]).buffer,name:`account_${a}`,displayName:`account_${a}`},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{userVerification:"required"},timeout:6e4,attestation:"none"},n=await navigator.credentials.create({publicKey:r});if(n){const i=n.response;return{challenge:e,id:n.id,rawId:o(n.rawId),type:n.type,response:{clientDataJSON:o(i.clientDataJSON),attestationObject:o(i.attestationObject)}}}else throw new Error},f=async({challenge:e})=>{const t={challenge:c(s(e)),timeout:6e4,rpId:"localhost",userVerification:"required"},a=await navigator.credentials.get({publicKey:t});if(a){const r=a.response;new DataView(r.authenticatorData).getUint32(33,!1);const n={challenge:e,id:a.id,rawId:o(a.rawId),type:a.type,response:{authenticatorData:o(r.authenticatorData),clientDataJSON:o(r.clientDataJSON),signature:o(r.signature)}};if(!r.userHandle)throw new Error("No credential found");const i=new Uint8Array(r.userHandle).slice(0,32);return{credentialData:n,clientKey:i}}else throw new Error("No credential found")};export{f as a,d as b,p as c,y as d,u as g};
