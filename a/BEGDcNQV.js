function o(a){const e=String.fromCharCode(...new Uint8Array(a));return window.btoa(e).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}function c(a){let e=a.replace(/-/g,"+").replace(/_/g,"/");const t=e.length%4;return t&&(e+="=".repeat(4-t)),e}function s(a){try{const e=atob(a),t=new Uint8Array(e.length);for(let r=0;r<e.length;r++)t[r]=e.charCodeAt(r);return t.buffer}catch(e){throw e}}function u(a){const e=c(a);return s(e)}const d=async({challenge:a,clientKey:e})=>{const t=Math.floor(Math.random()*100),r={challenge:s(c(a)),rp:{id:"localhost",name:"notes"},user:{id:new Uint8Array([...e,...crypto.getRandomValues(new Uint8Array(16))]).buffer,name:`account_${t}`,displayName:`account_${t}`},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{userVerification:"required"},timeout:6e4,attestation:"none"},n=await navigator.credentials.create({publicKey:r});if(n){const i=n.response;return{challenge:a,id:n.id,rawId:o(n.rawId),type:n.type,response:{clientDataJSON:o(i.clientDataJSON),attestationObject:o(i.attestationObject)}}}else throw new Error},p=async({challenge:a})=>{const e={challenge:s(c(a)),timeout:6e4,rpId:"localhost",userVerification:"required"},t=await navigator.credentials.get({publicKey:e});if(t){const r=t.response,n={challenge:a,id:t.id,rawId:o(t.rawId),type:t.type,response:{authenticatorData:o(r.authenticatorData),clientDataJSON:o(r.clientDataJSON),signature:o(r.signature)}};if(!r.userHandle)throw new Error("No credential found");const i=new Uint8Array(r.userHandle).slice(0,32);return{credentialData:n,clientKey:i}}else throw new Error("No credential found")};export{o as a,u as b,d as c,p as g};
