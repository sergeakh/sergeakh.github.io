function o(t){const e=String.fromCharCode(...new Uint8Array(t));return window.btoa(e).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}function c(t){let e=t.replace(/-/g,"+").replace(/_/g,"/");const r=e.length%4;return r&&(e+="=".repeat(4-r)),e}function s(t){try{const e=atob(t),r=new Uint8Array(e.length);for(let a=0;a<e.length;a++)r[a]=e.charCodeAt(a);return r.buffer}catch(e){throw console.error("Error decoding base64:",e,"Input:",t),e}}function u(t){const e=c(t);return s(e)}const d=async({challenge:t,clientKey:e})=>{const r=Math.floor(Math.random()*100),a={challenge:s(c(t)),rp:{id:"localhost",name:"notes"},user:{id:new Uint8Array([...e,...crypto.getRandomValues(new Uint8Array(16))]).buffer,name:`account_${r}`,displayName:`account_${r}`},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{userVerification:"required"},timeout:6e4,attestation:"none"},n=await navigator.credentials.create({publicKey:a});if(n){const i=n.response;return{challenge:t,id:n.id,rawId:o(n.rawId),type:n.type,response:{clientDataJSON:o(i.clientDataJSON),attestationObject:o(i.attestationObject)}}}else throw new Error},p=async({challenge:t})=>{const e={challenge:s(c(t)),timeout:6e4,rpId:"localhost",userVerification:"required"},r=await navigator.credentials.get({publicKey:e});if(r){const a=r.response,n={challenge:t,id:r.id,rawId:o(r.rawId),type:r.type,response:{authenticatorData:o(a.authenticatorData),clientDataJSON:o(a.clientDataJSON),signature:o(a.signature)}};if(!a.userHandle)throw new Error("No credential found");const i=new Uint8Array(a.userHandle).slice(0,32);return{credentialData:n,clientKey:i}}else throw new Error("No credential found")};export{o as a,u as b,d as c,p as g};
