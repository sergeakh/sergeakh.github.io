{"version":3,"file":"service-worker.mjs","sources":["../src/service-worker.js"],"sourcesContent":["const FILES = self.__WB_MANIFEST;\n\nconst CACHE_VERSION = (import.meta.env.APP_VERSION || 'v1') + '.' + import.meta.env.APP_BUILD_DATE;\n\nconst precache = async () => {\n\tconst cache = await caches.open(CACHE_VERSION);\n\n\tawait Promise.all(\n\t\tFILES.map(async (file) => {\n\t\t\tconst url = new URL(file.url, location.href);\n\n\t\t\tif (file.revision) {\n\t\t\t\turl.searchParams.append('__WB_REVISION', file.revision);\n\t\t\t}\n\n\t\t\tconst match = await caches.match(url);\n\n\t\t\tif (match) {\n\t\t\t\tawait cache.put(url, match.clone());\n\t\t\t} else {\n\t\t\t\tawait cache.add(url);\n\t\t\t}\n\t\t})\n\t);\n};\n\nself.addEventListener('install', async () => {\n\tawait precache();\n});\n\nself.addEventListener('activate', async () => {\n\tconst cachesKeys = await caches.keys();\n\n\tawait Promise.all(\n\t\tcachesKeys.map(async (key) => {\n\t\t\tif (CACHE_VERSION === key) return;\n\n\t\t\tawait caches.delete(key);\n\t\t})\n\t);\n});\n\nconst getIndexHTML = async (cache) => cache.match('/index.html', { ignoreSearch: true });\n\nconst fromCache = async (e) => {\n\tconst cache = await caches.open(CACHE_VERSION);\n\n\tconst { pathname } = new URL(e.request.url);\n\tconst url = pathname === '/' ? '/index.html' : pathname;\n\n\tconst match = await cache.match(url, { ignoreSearch: true });\n\n\tif (match) return match;\n\n\tconst req = e.request.clone();\n\n\tconst isAcceptHTML = req.headers.get('accept')?.includes('text/html');\n\n\ttry {\n\t\tconst response = await fetch(e.request);\n\n\t\tif (response.status === 404 && req.method === 'GET' && isAcceptHTML) {\n\t\t\treturn (await getIndexHTML(cache)) || response;\n\t\t}\n\n\t\tif (response.status === 200) {\n\t\t\tawait cache.put(req, response.clone());\n\t\t}\n\n\t\treturn response;\n\t} catch (err) {\n\t\tif (isAcceptHTML) {\n\t\t\tconst indexHTML = await getIndexHTML(cache);\n\n\t\t\tif (indexHTML) return indexHTML;\n\t\t}\n\n\t\tthrow err;\n\t}\n};\n\nself.addEventListener('fetch', (e) => {\n\te.respondWith(fromCache(e));\n});\n"],"names":["FILES","CACHE_VERSION","precache","cache","file","url","match","cachesKeys","key","getIndexHTML","fromCache","e","_a","pathname","req","isAcceptHTML","response","err","indexHTML"],"mappings":"AAAA,MAAMA,EAAQ,KAAK,cAEbC,EAAiB,SAA6C,cAE9DC,EAAW,SAAY,CAC5B,MAAMC,EAAQ,MAAM,OAAO,KAAKF,CAAa,EAE7C,MAAM,QAAQ,IACbD,EAAM,IAAI,MAAOI,GAAS,CACzB,MAAMC,EAAM,IAAI,IAAID,EAAK,IAAK,SAAS,IAAI,EAEvCA,EAAK,UACRC,EAAI,aAAa,OAAO,gBAAiBD,EAAK,QAAQ,EAGvD,MAAME,EAAQ,MAAM,OAAO,MAAMD,CAAG,EAEhCC,EACH,MAAMH,EAAM,IAAIE,EAAKC,EAAM,OAAO,EAElC,MAAMH,EAAM,IAAIE,CAAG,CAErB,CAAC,CAAA,CAEH,EAEA,KAAK,iBAAiB,UAAW,SAAY,CAC5C,MAAMH,EAAA,CACP,CAAC,EAED,KAAK,iBAAiB,WAAY,SAAY,CAC7C,MAAMK,EAAa,MAAM,OAAO,KAAA,EAEhC,MAAM,QAAQ,IACbA,EAAW,IAAI,MAAOC,GAAQ,CACzBP,IAAkBO,GAEtB,MAAM,OAAO,OAAOA,CAAG,CACxB,CAAC,CAAA,CAEH,CAAC,EAED,MAAMC,EAAe,MAAON,GAAUA,EAAM,MAAM,cAAe,CAAE,aAAc,GAAM,EAEjFO,EAAY,MAAOC,GAAM,CA5C/B,IAAAC,EA6CC,MAAMT,EAAQ,MAAM,OAAO,KAAKF,CAAa,EAEvC,CAAE,SAAAY,CAAA,EAAa,IAAI,IAAIF,EAAE,QAAQ,GAAG,EACpCN,EAAMQ,IAAa,IAAM,cAAgBA,EAEzCP,EAAQ,MAAMH,EAAM,MAAME,EAAK,CAAE,aAAc,GAAM,EAE3D,GAAIC,EAAO,OAAOA,EAElB,MAAMQ,EAAMH,EAAE,QAAQ,MAAA,EAEhBI,GAAeH,EAAAE,EAAI,QAAQ,IAAI,QAAQ,IAAxB,YAAAF,EAA2B,SAAS,aAEzD,GAAI,CACH,MAAMI,EAAW,MAAM,MAAML,EAAE,OAAO,EAEtC,OAAIK,EAAS,SAAW,KAAOF,EAAI,SAAW,OAASC,EAC9C,MAAMN,EAAaN,CAAK,GAAMa,GAGnCA,EAAS,SAAW,KACvB,MAAMb,EAAM,IAAIW,EAAKE,EAAS,OAAO,EAG/BA,EACR,OAASC,EAAK,CACb,GAAIF,EAAc,CACjB,MAAMG,EAAY,MAAMT,EAAaN,CAAK,EAE1C,GAAIe,EAAW,OAAOA,CACvB,CAEA,MAAMD,CACP,CACD,EAEA,KAAK,iBAAiB,QAAUN,GAAM,CACrCA,EAAE,YAAYD,EAAUC,CAAC,CAAC,CAC3B,CAAC"}