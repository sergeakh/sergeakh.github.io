const w=[...[{"revision":"3cc241f5728e8edec467137df829f0d2","url":"a/a0Nv7EHq4.js"},{"revision":"1a0b75faec3345188c6a1accb5f17d1e","url":"a/a46SryS1G.js"},{"revision":"326167002abe53d14618cc83c32aa2e8","url":"a/a9q_jSmK4.js"},{"revision":"71b760d70cfb38c4fd9b8a5104be2056","url":"a/aB29A_v-K.css"},{"revision":"5183df95f403cf3141fa28e421890bdc","url":"a/aBBI8MgAY.css"},{"revision":"fa23468610d084eaeaee419c85eb4a79","url":"a/aBdtbMQoM.css"},{"revision":"b4b8c7e9d540100cf743ca08a946eb96","url":"a/aBEGDcNQV.js"},{"revision":"6814369e506c49dd7deb5d475a4b905f","url":"a/aBem4Ctjp.css"},{"revision":"b62b7409b030f95305c541cbc5550459","url":"a/aBeWFm1o7.css"},{"revision":"a72751e48a520a5c5c85bbd674508893","url":"a/aBgAKudUz.css"},{"revision":"eaca239b66bcec51efc09d4e3bdbf59b","url":"a/aBhtHFOya.css"},{"revision":"1fd234dcb8d713f84f2a86a6a41ce55e","url":"a/aBoE_KuaD.js"},{"revision":"d52a02f7643d24b0db263ddb6b8159c8","url":"a/aBrkJtqMH.css"},{"revision":"4a618359eb30d540fddd98b9143c9943","url":"a/aBwlsdL1m.js"},{"revision":"b886248df7f839e01a327d95ef54f5d8","url":"a/aBwtR3CxI.js"},{"revision":"6be3b46a4d1e5d4df82441338725e5cb","url":"a/aCe0s2p0g.js"},{"revision":"9aaf51ebee267f286ce950f6232385d7","url":"a/aCEBfkSMR.css"},{"revision":"f77f8e8bbf56a49d50718736a04b5bb0","url":"a/aCg3filF1.css"},{"revision":"90bfed1e9abbf0fc96eeec9d6f61cb7d","url":"a/aCH18nfIo.css"},{"revision":"c4e2eeb47276ded9898e0637cae6d84a","url":"a/aCIhPIKMt.js"},{"revision":"03c6411e325b679cf3ee9135cb906166","url":"a/aCNQA7vtK.js"},{"revision":"262e707fe9c3273a07fddf2c95aaa2f2","url":"a/aCovFy9VH.css"},{"revision":"037e600d5e80b0356ec7e2b5ed72b95b","url":"a/aCpa8lgv9.js"},{"revision":"6f57c631283990713e68306b1b3acf09","url":"a/aCTCscuk4.js"},{"revision":"eb3b598d9198fc0852e553f1cc12f964","url":"a/aCTQR-8cv.js"},{"revision":"87f9291353a9943a127f757f24e85266","url":"a/aCWn1BM4V.css"},{"revision":"6e9fbb42568173bdca8474b7adb73aa7","url":"a/aCwSeR-ye.js"},{"revision":"f90c228bbef76ad488e2e72479b6db56","url":"a/aCXobA9i7.css"},{"revision":"4643a49f7bd2752c99f254eb47a00aa6","url":"a/aCYqPgi-1.css"},{"revision":"4a8d6fc4d042acb1c64af3e432ef113a","url":"a/aCZ4xsCn8.js"},{"revision":"dcb9175bf1d774684c8762ddb1d726be","url":"a/aD2sjQUDw.js"},{"revision":"972a1a6c243c2102b39d5834fce9a63d","url":"a/aD9UzkIGZ.js"},{"revision":"a4612c168b334680daa96b2f8808f217","url":"a/aDiVjVem5.js"},{"revision":"919b568e99219a95a924e293da993dd7","url":"a/aDjSJDzG7.css"},{"revision":"3dbb1d840eec83b9058224f859861479","url":"a/aDKwUMAZP.css"},{"revision":"fff7cd911d027607824eb2c08050f65a","url":"a/aDPpjgz7w.js"},{"revision":"21371e9d8b0ab3c7d8887bf855f0ef73","url":"a/aDU96KTZi.css"},{"revision":"e61640758e0a8e1236580e67ed52bb91","url":"a/aDUlAFHA4.js"},{"revision":"1c4fceafedd5eedaa0229aee9a7c79ed","url":"a/aDvFK_73t.js"},{"revision":"1eece98c5f06a473daee70f1aeb0affd","url":"a/afGUkjeV7.css"},{"revision":"07ff664f2e2947571ff4e51a7b97b2c2","url":"a/ah0RHS_jq.js"},{"revision":"cc92e9fc38450cc724227bdc34b3e5df","url":"a/aHdDxvcNK.css"},{"revision":"cb50b9f0f10956059c25723d1a6ca035","url":"a/aj6zxmxGs.css"},{"revision":"09ea909308455b73949f795e4bb5c70d","url":"a/ajAxldpYG.js"},{"revision":"9f13d16ecc9f56098972fe41354116bf","url":"a/aKetiF4ka.js"},{"revision":"fc4df696ddb6a3d73bd354655446835b","url":"a/aoNu0P2qY.js"},{"revision":"0fd171d2262c0ed255f286730670f404","url":"a/aWEzBDvsS.js"},{"revision":"42798efeb1c120c870b26c5b4cba78ba","url":"a/awT60lUvv.js"},{"revision":"e562aaa6b073671deb85e74509afb212","url":"a/aWzA8UC9C.js"},{"revision":"7a21f5177dfbe0bb6bd8a43dfe540777","url":"index.html"},{"revision":"38013143dc2183340ede8bc1c5124507","url":"registerSW.js"},{"revision":"72bfc92074c4057ec02457d71234e987","url":"add.svg"},{"revision":"e0bb08e3f2cf3c232c1a6d46d7db219d","url":"icon-192.png"},{"revision":"a3d6bc1ed7d7d3b6fa6fe7bf9dafc4c4","url":"icon-512.png"},{"revision":"63f2a5682e5ac6301a52c8ac2be9bba4","url":"icon-mask.png"},{"revision":"64ff53675e33cb152380233172f621d8","url":"manifest.webmanifest"}]||[],{url:"/build-metadata.json"}],r="0.0.87."+1762031661414,d=async(t,e=3,a=1e3)=>{for(let s=0;s<e;s++)try{const c=await fetch(t);if(!c.ok)throw new Error(`Request failed with status ${c.status}`);return c}catch(c){if(s<e-1)await new Promise(n=>setTimeout(n,a));else throw c}},f=async()=>{const t=await caches.open(r);await Promise.allSettled(w.map(async e=>{if(!e||!e.url)return;const a=new URL(e.url,location.origin);e.revision?a.searchParams.append("__WB_REVISION",e.revision):a.searchParams.append("__WB_CACHE_VERSION",r);const s=await caches.match(a);s?await t.put(a,s.clone()):await t.add(a)}))},m=async()=>{const t=await caches.keys();await Promise.allSettled(t.map(async e=>{r!==e&&await caches.delete(e)}))};let o=!1;self.addEventListener("install",t=>{t.waitUntil((async()=>{o=(await caches.keys()).length===0,f(),o&&self.skipWaiting()})())});self.addEventListener("activate",t=>{t.waitUntil((async()=>{await m(),o&&self.clients.claim()})())});const u=async t=>t.match("/index.html",{ignoreSearch:!0}),p=async t=>{if(t.request.method!=="GET"||!t.request.url.startsWith(self.location.origin))return fetch(t.request);const e=await caches.open(r),{pathname:a}=new URL(t.request.url),s=a==="/"?"/index.html":a,c=await e.match(s,{ignoreSearch:!0});if(c)return c;const n=t.request,l=n.mode==="navigate"||n.headers.get("accept")?.includes("text/html");try{const i=await d(n);return i.status===404&&n.method==="GET"&&l?await u(e)||i:(i.status===200&&await e.put(n,i.clone()),i)}catch(i){if(l){const h=await u(e);if(h)return h}throw i}};self.addEventListener("fetch",t=>{t.respondWith(p(t))});
