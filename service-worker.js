const w=[...[{"revision":"423cca86f880786416d61c83294edece","url":"a/a3YUUDEtm.js"},{"revision":"f77dce35bd0dc2c8682d40dea80c12fd","url":"a/a79EKMI6I.js"},{"revision":"326167002abe53d14618cc83c32aa2e8","url":"a/a9q_jSmK4.js"},{"revision":"2cccaeff36ba86207bc6334c734a091f","url":"a/ab28aZxJE.js"},{"revision":"71b760d70cfb38c4fd9b8a5104be2056","url":"a/aB29A_v-K.css"},{"revision":"e5dc0076ce81f3116a6121f21cf9e6fb","url":"a/aB5cPCqVk.js"},{"revision":"98180121c26dc4bd5f61e4d3c6f1b17d","url":"a/aB8sUtq-T.js"},{"revision":"5183df95f403cf3141fa28e421890bdc","url":"a/aBBI8MgAY.css"},{"revision":"b4b8c7e9d540100cf743ca08a946eb96","url":"a/aBEGDcNQV.js"},{"revision":"6814369e506c49dd7deb5d475a4b905f","url":"a/aBem4Ctjp.css"},{"revision":"b62b7409b030f95305c541cbc5550459","url":"a/aBeWFm1o7.css"},{"revision":"a72751e48a520a5c5c85bbd674508893","url":"a/aBgAKudUz.css"},{"revision":"0753e684f5a01f84f9e6ee99dcb6b216","url":"a/aBHI14Eet.js"},{"revision":"eaca239b66bcec51efc09d4e3bdbf59b","url":"a/aBhtHFOya.css"},{"revision":"eb271e9e5783de65b282e493a05c1778","url":"a/aBjbeMgcj.js"},{"revision":"24d9eb077cd99366255f4b15c9a6231c","url":"a/aBlJmPEQh.js"},{"revision":"4c7d9b774b936532c123440e4d54a0a8","url":"a/abmUaNdiG.js"},{"revision":"d52a02f7643d24b0db263ddb6b8159c8","url":"a/aBrkJtqMH.css"},{"revision":"76d6e196be0911b86e0922ff5d17d55d","url":"a/aBvv2wCxN.js"},{"revision":"05553de42bfe8fb61474d18f83781e97","url":"a/aBYB-e6jS.js"},{"revision":"6f6fa5b9928d765a93780638483f19c2","url":"a/aBz7x3D6Z.js"},{"revision":"e5792f31356f8c6c76989036ef4f7679","url":"a/aC30q1Axi.js"},{"revision":"9aaf51ebee267f286ce950f6232385d7","url":"a/aCEBfkSMR.css"},{"revision":"f77f8e8bbf56a49d50718736a04b5bb0","url":"a/aCg3filF1.css"},{"revision":"90bfed1e9abbf0fc96eeec9d6f61cb7d","url":"a/aCH18nfIo.css"},{"revision":"262e707fe9c3273a07fddf2c95aaa2f2","url":"a/aCovFy9VH.css"},{"revision":"037e600d5e80b0356ec7e2b5ed72b95b","url":"a/aCpa8lgv9.js"},{"revision":"87f9291353a9943a127f757f24e85266","url":"a/aCWn1BM4V.css"},{"revision":"f90c228bbef76ad488e2e72479b6db56","url":"a/aCXobA9i7.css"},{"revision":"4643a49f7bd2752c99f254eb47a00aa6","url":"a/aCYqPgi-1.css"},{"revision":"8fb18dc59523f9af7690fcc3d2df22c7","url":"a/aDc3jJWu5.js"},{"revision":"40adf3c825bb5661650860bc7cf2b4c3","url":"a/aDEQG77vb.js"},{"revision":"919b568e99219a95a924e293da993dd7","url":"a/aDjSJDzG7.css"},{"revision":"3dbb1d840eec83b9058224f859861479","url":"a/aDKwUMAZP.css"},{"revision":"21371e9d8b0ab3c7d8887bf855f0ef73","url":"a/aDU96KTZi.css"},{"revision":"4eefd8fab7d1a1bbc8b05ca960a64f26","url":"a/aDvk1nWAS.js"},{"revision":"620009653c188efe2eb4db07dbaec89d","url":"a/aDwnVO2fj.js"},{"revision":"13295cd66413cb17125612e3c07d0faa","url":"a/aeIviP4-O.js"},{"revision":"1eece98c5f06a473daee70f1aeb0affd","url":"a/afGUkjeV7.css"},{"revision":"05aa8863dbbfd568f84988c9412a5178","url":"a/agm19zyXV.js"},{"revision":"cc92e9fc38450cc724227bdc34b3e5df","url":"a/aHdDxvcNK.css"},{"revision":"cb50b9f0f10956059c25723d1a6ca035","url":"a/aj6zxmxGs.css"},{"revision":"e8dc5e8916c722cc1a31f97d655e7a04","url":"a/amDS757Ml.js"},{"revision":"48becdedeb514a89940c13e98c068af6","url":"a/aOMveDNXo.js"},{"revision":"35fd574bcaf81c20ed96cde8b4d2025f","url":"a/aoxrkP1Xb.js"},{"revision":"1f8c2762cddd6d5b0620719cef0f2630","url":"a/aRGyLIr-o.js"},{"revision":"83bad62ca64c8065064a4300b6c46cf1","url":"a/aujc3vZIG.css"},{"revision":"9af7b04418439fae34c0cd0f0e1d668b","url":"a/aULyxD_Va.js"},{"revision":"ca23efbb60703ceac4500ae7f1ad0d55","url":"a/aZ7WU0Tet.js"},{"revision":"5a0a2c564b64e4f5b1f2ef5ed75b670c","url":"index.html"},{"revision":"38013143dc2183340ede8bc1c5124507","url":"registerSW.js"},{"revision":"72bfc92074c4057ec02457d71234e987","url":"add.svg"},{"revision":"e0bb08e3f2cf3c232c1a6d46d7db219d","url":"icon-192.png"},{"revision":"a3d6bc1ed7d7d3b6fa6fe7bf9dafc4c4","url":"icon-512.png"},{"revision":"63f2a5682e5ac6301a52c8ac2be9bba4","url":"icon-mask.png"},{"revision":"64ff53675e33cb152380233172f621d8","url":"manifest.webmanifest"}]||[],{url:"/build-metadata.json"}],r="0.0.85."+1762024517163,d=async(t,e=3,a=1e3)=>{for(let s=0;s<e;s++)try{const c=await fetch(t);if(!c.ok)throw new Error(`Request failed with status ${c.status}`);return c}catch(c){if(s<e-1)await new Promise(n=>setTimeout(n,a));else throw c}},f=async()=>{const t=await caches.open(r);await Promise.allSettled(w.map(async e=>{if(!e||!e.url)return;const a=new URL(e.url,location.origin);e.revision?a.searchParams.append("__WB_REVISION",e.revision):a.searchParams.append("__WB_CACHE_VERSION",r);const s=await caches.match(a);s?await t.put(a,s.clone()):await t.add(a)}))},m=async()=>{const t=await caches.keys();await Promise.allSettled(t.map(async e=>{r!==e&&await caches.delete(e)}))};let o=!1;self.addEventListener("install",t=>{t.waitUntil((async()=>{o=(await caches.keys()).length===0,f(),o&&self.skipWaiting()})())});self.addEventListener("activate",t=>{t.waitUntil((async()=>{await m(),o&&self.clients.claim()})())});const u=async t=>t.match("/index.html",{ignoreSearch:!0}),p=async t=>{if(t.request.method!=="GET"||!t.request.url.startsWith(self.location.origin))return fetch(t.request);const e=await caches.open(r),{pathname:a}=new URL(t.request.url),s=a==="/"?"/index.html":a,c=await e.match(s,{ignoreSearch:!0});if(c)return c;const n=t.request,l=n.mode==="navigate"||n.headers.get("accept")?.includes("text/html");try{const i=await d(n);return i.status===404&&n.method==="GET"&&l?await u(e)||i:(i.status===200&&await e.put(n,i.clone()),i)}catch(i){if(l){const h=await u(e);if(h)return h}throw i}};self.addEventListener("fetch",t=>{t.respondWith(p(t))});
