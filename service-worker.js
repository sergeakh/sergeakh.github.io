const u=[{"revision":null,"url":"assets/AccessKeys-Cl3W4SWP.css"},{"revision":null,"url":"assets/AccessKeys-CXZJdeqA.js"},{"revision":null,"url":"assets/api-7nXQQ8YG.js"},{"revision":null,"url":"assets/ClearStore-BgTwls-K.js"},{"revision":null,"url":"assets/ClearStore-DiVqV26R.css"},{"revision":null,"url":"assets/ConfirmAccessKey-BEOXyioc.css"},{"revision":null,"url":"assets/ConfirmAccessKey-BsLff0l2.js"},{"revision":null,"url":"assets/DesktopDialog-C5Rl2lrH.css"},{"revision":null,"url":"assets/DesktopDialog-CNgIAjWC.js"},{"revision":null,"url":"assets/ExportData-B0_csHdq.css"},{"revision":null,"url":"assets/ExportData-CkEfgTlU.js"},{"revision":null,"url":"assets/ImportData-CZGzVRRc.css"},{"revision":null,"url":"assets/ImportData-vHlRvad7.js"},{"revision":null,"url":"assets/index-C1vnfXtA.js"},{"revision":null,"url":"assets/index-X8Q0ns5b.css"},{"revision":null,"url":"assets/Signin-DXH5bIvN.js"},{"revision":null,"url":"assets/Signup-CnX7iJxK.css"},{"revision":null,"url":"assets/Signup-CyNeK-sI.js"},{"revision":"403b1270e325fba8bb079cb2d1b64497","url":"index.html"},{"revision":"38013143dc2183340ede8bc1c5124507","url":"registerSW.js"},{"revision":"72bfc92074c4057ec02457d71234e987","url":"add.svg"},{"revision":"e0bb08e3f2cf3c232c1a6d46d7db219d","url":"icon-192.png"},{"revision":"a3d6bc1ed7d7d3b6fa6fe7bf9dafc4c4","url":"icon-512.png"},{"revision":"63f2a5682e5ac6301a52c8ac2be9bba4","url":"icon-mask.png"},{"revision":"da6e3bad6b245af9423681eea3e97bc2","url":"manifest.webmanifest"}],r="0.0.1."+1753327061483,d=async()=>{const t=await caches.open(r);await Promise.all(u.map(async e=>{const a=new URL(e.url,location.href);e.revision&&a.searchParams.append("__WB_REVISION",e.revision);const s=await caches.match(a);s?await t.put(a,s.clone()):await t.add(a)}))};self.addEventListener("install",async()=>{await d()});self.addEventListener("activate",async()=>{const t=await caches.keys();await Promise.all(t.map(async e=>{r!==e&&await caches.delete(e)}))});const l=async t=>t.match("/index.html",{ignoreSearch:!0}),w=async t=>{const e=await caches.open(r),{pathname:a}=new URL(t.request.url),s=a==="/"?"/index.html":a,i=await e.match(s,{ignoreSearch:!0});if(i)return i;const n=t.request.clone(),o=n.headers.get("accept")?.includes("text/html");try{const c=await fetch(t.request);return c.status===404&&n.method==="GET"&&o?await l(e)||c:(c.status===200&&await e.put(n,c.clone()),c)}catch(c){if(o){const h=await l(e);if(h)return h}throw c}};self.addEventListener("fetch",t=>{t.respondWith(w(t))});
