const w=[...[{"revision":"761ff9bd05d9e0c08b2938e2743df54e","url":"a/a-qp5G90e.js"},{"revision":"dc1bac85e281514a4b6386b66c650670","url":"a/a0zL88LQ3.js"},{"revision":"7a3c43caa9cd7eb25400773c7ec64c77","url":"a/a3qG1t-sr.js"},{"revision":"e3b6f4b2cc80ffd9363890208d3cb643","url":"a/a5G7XCJkp.js"},{"revision":"86d59e591e33b61702d00a766d279f35","url":"a/a77Tr-bmU.js"},{"revision":"8cea0840319b81a0f8fd3b2ad5720d53","url":"a/a9dGkTydP.js"},{"revision":"326167002abe53d14618cc83c32aa2e8","url":"a/a9q_jSmK4.js"},{"revision":"0223dec18600d7c44bfe1b85a82872db","url":"a/aB0f-N9Xs.js"},{"revision":"71b760d70cfb38c4fd9b8a5104be2056","url":"a/aB29A_v-K.css"},{"revision":"5183df95f403cf3141fa28e421890bdc","url":"a/aBBI8MgAY.css"},{"revision":"389f8440bf9719e37d1370beb1bdb5de","url":"a/aBBWFTERC.js"},{"revision":"4d26cd7f0e7044e57b4f15ae11753f8e","url":"a/aBCofzZOf.js"},{"revision":"b4b8c7e9d540100cf743ca08a946eb96","url":"a/aBEGDcNQV.js"},{"revision":"6814369e506c49dd7deb5d475a4b905f","url":"a/aBem4Ctjp.css"},{"revision":"b62b7409b030f95305c541cbc5550459","url":"a/aBeWFm1o7.css"},{"revision":"a72751e48a520a5c5c85bbd674508893","url":"a/aBgAKudUz.css"},{"revision":"eaca239b66bcec51efc09d4e3bdbf59b","url":"a/aBhtHFOya.css"},{"revision":"8996ed13e7eeb240049d30dd22bbf4a8","url":"a/aBJdUgr_f.js"},{"revision":"d52a02f7643d24b0db263ddb6b8159c8","url":"a/aBrkJtqMH.css"},{"revision":"b1a2f844bd6bbdc52a13b8f7ccfdb5c6","url":"a/aBVlMk1zz.js"},{"revision":"a553ac56969f0cef6b28a98cd39ab963","url":"a/aBx9Z33Hy.js"},{"revision":"2cdce62ec86c0c5098e9104086abd2f5","url":"a/aByxTHhu4.js"},{"revision":"7e793a85ec7845616530b0c8b9936abc","url":"a/aCDngVt8o.js"},{"revision":"9aaf51ebee267f286ce950f6232385d7","url":"a/aCEBfkSMR.css"},{"revision":"f77f8e8bbf56a49d50718736a04b5bb0","url":"a/aCg3filF1.css"},{"revision":"4f1819b04ebfdcf2eee44c6542111ec2","url":"a/aCGNgpKUJ.js"},{"revision":"90bfed1e9abbf0fc96eeec9d6f61cb7d","url":"a/aCH18nfIo.css"},{"revision":"262e707fe9c3273a07fddf2c95aaa2f2","url":"a/aCovFy9VH.css"},{"revision":"037e600d5e80b0356ec7e2b5ed72b95b","url":"a/aCpa8lgv9.js"},{"revision":"87f9291353a9943a127f757f24e85266","url":"a/aCWn1BM4V.css"},{"revision":"f90c228bbef76ad488e2e72479b6db56","url":"a/aCXobA9i7.css"},{"revision":"4643a49f7bd2752c99f254eb47a00aa6","url":"a/aCYqPgi-1.css"},{"revision":"385a29f372abfbc04eabad6526ad5b68","url":"a/aDAn1trxA.js"},{"revision":"e311d04c872940eb684f11b08a83115c","url":"a/aDbi0oJOk.js"},{"revision":"d664fc673999aa39491fb6ae4cdaeca0","url":"a/adBlmBWBY.js"},{"revision":"48eb4a134f54d9a17e0f2bf501e0fe97","url":"a/aDG-Y0JG-.css"},{"revision":"919b568e99219a95a924e293da993dd7","url":"a/aDjSJDzG7.css"},{"revision":"9897c80ee00bbdf4df4ee02cd42b3a4b","url":"a/aDKNaMXPD.js"},{"revision":"3dbb1d840eec83b9058224f859861479","url":"a/aDKwUMAZP.css"},{"revision":"21371e9d8b0ab3c7d8887bf855f0ef73","url":"a/aDU96KTZi.css"},{"revision":"299d9ed65093c68f6e661b2e45d37ccd","url":"a/aDv1PfMJi.js"},{"revision":"573f8ccdf3da6cd9450351682dbafc62","url":"a/aerjgLaY_.js"},{"revision":"1eece98c5f06a473daee70f1aeb0affd","url":"a/afGUkjeV7.css"},{"revision":"b0da4a6707c9352d16e00de7536b7332","url":"a/aftxHu19F.js"},{"revision":"cc92e9fc38450cc724227bdc34b3e5df","url":"a/aHdDxvcNK.css"},{"revision":"0f1545224c10233d44cf62c038499b6b","url":"a/ahnQlFvmY.js"},{"revision":"cb50b9f0f10956059c25723d1a6ca035","url":"a/aj6zxmxGs.css"},{"revision":"42e5d0d89dcdc7c3fd512ab7c4b43379","url":"a/apcDkXhY6.js"},{"revision":"1051d41cda3914587942ca0ec2455cdc","url":"a/aqgPJN1wH.js"},{"revision":"3b751ce45d1bd176683c2b8221c87cec","url":"index.html"},{"revision":"38013143dc2183340ede8bc1c5124507","url":"registerSW.js"},{"revision":"72bfc92074c4057ec02457d71234e987","url":"add.svg"},{"revision":"e0bb08e3f2cf3c232c1a6d46d7db219d","url":"icon-192.png"},{"revision":"a3d6bc1ed7d7d3b6fa6fe7bf9dafc4c4","url":"icon-512.png"},{"revision":"63f2a5682e5ac6301a52c8ac2be9bba4","url":"icon-mask.png"},{"revision":"64ff53675e33cb152380233172f621d8","url":"manifest.webmanifest"}]||[],{url:"/build-metadata.json"}],r="0.0.74."+1761986902517,d=async(t,e=3,a=1e3)=>{for(let s=0;s<e;s++)try{const c=await fetch(t);if(!c.ok)throw new Error(`Request failed with status ${c.status}`);return c}catch(c){if(s<e-1)await new Promise(n=>setTimeout(n,a));else throw c}},f=async()=>{const t=await caches.open(r);await Promise.allSettled(w.map(async e=>{if(!e||!e.url)return;const a=new URL(e.url,location.origin);e.revision?a.searchParams.append("__WB_REVISION",e.revision):a.searchParams.append("__WB_CACHE_VERSION",r);const s=await caches.match(a);s?await t.put(a,s.clone()):await t.add(a)}))},m=async()=>{const t=await caches.keys();await Promise.allSettled(t.map(async e=>{r!==e&&await caches.delete(e)}))};let o=!1;self.addEventListener("install",t=>{t.waitUntil((async()=>{o=(await caches.keys()).length===0,f(),o&&self.skipWaiting()})())});self.addEventListener("activate",t=>{t.waitUntil((async()=>{await m(),o&&self.clients.claim()})())});const u=async t=>t.match("/index.html",{ignoreSearch:!0}),p=async t=>{if(t.request.method!=="GET"||!t.request.url.startsWith(self.location.origin))return fetch(t.request);const e=await caches.open(r),{pathname:a}=new URL(t.request.url),s=a==="/"?"/index.html":a,c=await e.match(s,{ignoreSearch:!0});if(c)return c;const n=t.request,l=n.mode==="navigate"||n.headers.get("accept")?.includes("text/html");try{const i=await d(n);return i.status===404&&n.method==="GET"&&l?await u(e)||i:(i.status===200&&await e.put(n,i.clone()),i)}catch(i){if(l){const h=await u(e);if(h)return h}throw i}};self.addEventListener("fetch",t=>{t.respondWith(p(t))});
