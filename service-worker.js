const w=[...[{"revision":"326167002abe53d14618cc83c32aa2e8","url":"a/a9q_jSmK4.js"},{"revision":"71b760d70cfb38c4fd9b8a5104be2056","url":"a/aB29A_v-K.css"},{"revision":"76cbad05ddacc39822a0de19c331f75f","url":"a/aB9Z3z5GS.js"},{"revision":"ca5dfd2c81369520fc61ff9c52d073a6","url":"a/aBAKISLjs.js"},{"revision":"5183df95f403cf3141fa28e421890bdc","url":"a/aBBI8MgAY.css"},{"revision":"fa23468610d084eaeaee419c85eb4a79","url":"a/aBdtbMQoM.css"},{"revision":"b4b8c7e9d540100cf743ca08a946eb96","url":"a/aBEGDcNQV.js"},{"revision":"6814369e506c49dd7deb5d475a4b905f","url":"a/aBem4Ctjp.css"},{"revision":"b62b7409b030f95305c541cbc5550459","url":"a/aBeWFm1o7.css"},{"revision":"a72751e48a520a5c5c85bbd674508893","url":"a/aBgAKudUz.css"},{"revision":"f5bff8d1d40a733e65e3a11450856ed1","url":"a/aBGox38AG.js"},{"revision":"eaca239b66bcec51efc09d4e3bdbf59b","url":"a/aBhtHFOya.css"},{"revision":"929506e4ca7350f932eb24af03330445","url":"a/aBOq5W62p.js"},{"revision":"d52a02f7643d24b0db263ddb6b8159c8","url":"a/aBrkJtqMH.css"},{"revision":"3853f826e8f1722cd16ad80d9aa27ae7","url":"a/aC92Y_oDO.js"},{"revision":"9aaf51ebee267f286ce950f6232385d7","url":"a/aCEBfkSMR.css"},{"revision":"f77f8e8bbf56a49d50718736a04b5bb0","url":"a/aCg3filF1.css"},{"revision":"90bfed1e9abbf0fc96eeec9d6f61cb7d","url":"a/aCH18nfIo.css"},{"revision":"6a8df000bae5eefb93a62e100b368554","url":"a/aCHQ_hIR0.js"},{"revision":"da54d9a37ebaa8bc7ae9000ad457f8f2","url":"a/aCJihITFo.js"},{"revision":"84f4b07a2a1e31cb2dd8103b1e35f417","url":"a/aCkdsbhzS.js"},{"revision":"6f266d8433cd91e16cf7c236fe3b443b","url":"a/aCm6m44kS.js"},{"revision":"262e707fe9c3273a07fddf2c95aaa2f2","url":"a/aCovFy9VH.css"},{"revision":"037e600d5e80b0356ec7e2b5ed72b95b","url":"a/aCpa8lgv9.js"},{"revision":"30fd8b3c9e3cd2fd32de92847ee51735","url":"a/aCsdR4L4-.js"},{"revision":"6cea1a6347deec25bdd6f0561a0816b7","url":"a/aCSMQE2MU.js"},{"revision":"04af35cd2d55d270bf7ef74892c0c178","url":"a/aCtu9gDiK.js"},{"revision":"311762e7c17adb59515b6ed28035d2bc","url":"a/aCwF5ZxSb.js"},{"revision":"87f9291353a9943a127f757f24e85266","url":"a/aCWn1BM4V.css"},{"revision":"f90c228bbef76ad488e2e72479b6db56","url":"a/aCXobA9i7.css"},{"revision":"4643a49f7bd2752c99f254eb47a00aa6","url":"a/aCYqPgi-1.css"},{"revision":"d837eda1ddeae6f231ea88418327fa2d","url":"a/aD-YPuWZ4.js"},{"revision":"0fd813b5fd7cbdbc1562e5e67aded709","url":"a/aD4XDIo0M.js"},{"revision":"68b758fb2d6363235855aa8bffd014bf","url":"a/aD8WWYRrR.js"},{"revision":"83b4b73ef1bda9ac17b9fb9cc4e2d98f","url":"a/aDENJmUkB.js"},{"revision":"9d363b0ce0d5f743f61f7efec5f47ba5","url":"a/aDI1IkVBU.js"},{"revision":"57e63cf9baeba52ab4939df9c184313a","url":"a/aDiU0DjIA.js"},{"revision":"919b568e99219a95a924e293da993dd7","url":"a/aDjSJDzG7.css"},{"revision":"3dbb1d840eec83b9058224f859861479","url":"a/aDKwUMAZP.css"},{"revision":"e14456d2343c86e8937a6cde6939668b","url":"a/aDoKdO2n3.js"},{"revision":"024ff32434defeca2b03fb359e9f5bc0","url":"a/aDSP44NuT.js"},{"revision":"21371e9d8b0ab3c7d8887bf855f0ef73","url":"a/aDU96KTZi.css"},{"revision":"bf9007964f92a0121e9f27ab2e8d33f4","url":"a/aDWj9I-UO.js"},{"revision":"dfa72d311cc8d6dd6fdfb091774b9b0b","url":"a/aDX4HHoHb.js"},{"revision":"1eece98c5f06a473daee70f1aeb0affd","url":"a/afGUkjeV7.css"},{"revision":"cc92e9fc38450cc724227bdc34b3e5df","url":"a/aHdDxvcNK.css"},{"revision":"b8711ef6d418fe7385b43b7c09cf5b8c","url":"a/aj43HrHEJ.js"},{"revision":"cb50b9f0f10956059c25723d1a6ca035","url":"a/aj6zxmxGs.css"},{"revision":"211e201277a66dab2fb110a7ebd50aaf","url":"a/aNlUGz_oW.js"},{"revision":"38c002d8d1800e492262b2f1a68610c4","url":"index.html"},{"revision":"38013143dc2183340ede8bc1c5124507","url":"registerSW.js"},{"revision":"72bfc92074c4057ec02457d71234e987","url":"add.svg"},{"revision":"e0bb08e3f2cf3c232c1a6d46d7db219d","url":"icon-192.png"},{"revision":"a3d6bc1ed7d7d3b6fa6fe7bf9dafc4c4","url":"icon-512.png"},{"revision":"63f2a5682e5ac6301a52c8ac2be9bba4","url":"icon-mask.png"},{"revision":"64ff53675e33cb152380233172f621d8","url":"manifest.webmanifest"}]||[],{url:"/build-metadata.json"}],r="0.0.88."+1762032551215,d=async(t,e=3,a=1e3)=>{for(let s=0;s<e;s++)try{const c=await fetch(t);if(!c.ok)throw new Error(`Request failed with status ${c.status}`);return c}catch(c){if(s<e-1)await new Promise(n=>setTimeout(n,a));else throw c}},f=async()=>{const t=await caches.open(r);await Promise.allSettled(w.map(async e=>{if(!e||!e.url)return;const a=new URL(e.url,location.origin);e.revision?a.searchParams.append("__WB_REVISION",e.revision):a.searchParams.append("__WB_CACHE_VERSION",r);const s=await caches.match(a);s?await t.put(a,s.clone()):await t.add(a)}))},m=async()=>{const t=await caches.keys();await Promise.allSettled(t.map(async e=>{r!==e&&await caches.delete(e)}))};let o=!1;self.addEventListener("install",t=>{t.waitUntil((async()=>{o=(await caches.keys()).length===0,f(),o&&self.skipWaiting()})())});self.addEventListener("activate",t=>{t.waitUntil((async()=>{await m(),o&&self.clients.claim()})())});const u=async t=>t.match("/index.html",{ignoreSearch:!0}),p=async t=>{if(t.request.method!=="GET"||!t.request.url.startsWith(self.location.origin))return fetch(t.request);const e=await caches.open(r),{pathname:a}=new URL(t.request.url),s=a==="/"?"/index.html":a,c=await e.match(s,{ignoreSearch:!0});if(c)return c;const n=t.request,l=n.mode==="navigate"||n.headers.get("accept")?.includes("text/html");try{const i=await d(n);return i.status===404&&n.method==="GET"&&l?await u(e)||i:(i.status===200&&await e.put(n,i.clone()),i)}catch(i){if(l){const h=await u(e);if(h)return h}throw i}};self.addEventListener("fetch",t=>{t.respondWith(p(t))});
