const w=[...[{"revision":"9021016f437a6fb991ee7902646bbc86","url":"a/a6gqUGRLz.js"},{"revision":"326167002abe53d14618cc83c32aa2e8","url":"a/a9q_jSmK4.js"},{"revision":"1d4726588e69e2e81a5ae98163313a9e","url":"a/aABtJf1bx.css"},{"revision":"71b760d70cfb38c4fd9b8a5104be2056","url":"a/aB29A_v-K.css"},{"revision":"88f4b0e3248e96e0212728b2fc5c1ad8","url":"a/aB325fVc6.js"},{"revision":"c3a9761957fb8cba28ffaea5374163cb","url":"a/aB3eEHK5Y.js"},{"revision":"c577575f36906b73f4074db80a377e8a","url":"a/aB77J9sMJ.js"},{"revision":"79294b8f6bb3110a9624e2b2f2a7df92","url":"a/aB9X0n7PU.js"},{"revision":"5183df95f403cf3141fa28e421890bdc","url":"a/aBBI8MgAY.css"},{"revision":"55e8abe19ef52250332a58085efcf4f7","url":"a/aBCCcKHEM.js"},{"revision":"54ca0715050f22bf78a2f7bb8df12d03","url":"a/aBDMQSUIf.js"},{"revision":"b4b8c7e9d540100cf743ca08a946eb96","url":"a/aBEGDcNQV.js"},{"revision":"6814369e506c49dd7deb5d475a4b905f","url":"a/aBem4Ctjp.css"},{"revision":"2a051527ba69331eeeace8fb598f0cd3","url":"a/aBEVsJW2T.js"},{"revision":"b62b7409b030f95305c541cbc5550459","url":"a/aBeWFm1o7.css"},{"revision":"a72751e48a520a5c5c85bbd674508893","url":"a/aBgAKudUz.css"},{"revision":"eaca239b66bcec51efc09d4e3bdbf59b","url":"a/aBhtHFOya.css"},{"revision":"40976aa7c744d75fe55cb9efd3e98261","url":"a/aBJxi-eJ-.js"},{"revision":"44dd36f17e3a05dcd0ba0ba240a09020","url":"a/aBpg7aRNA.js"},{"revision":"d52a02f7643d24b0db263ddb6b8159c8","url":"a/aBrkJtqMH.css"},{"revision":"acb46d5d6002ac1b26189b8b04c144c8","url":"a/aC3uVxPRX.js"},{"revision":"7fba229ccc9550a0403f98db062464fa","url":"a/aC9V2UpHX.js"},{"revision":"9aaf51ebee267f286ce950f6232385d7","url":"a/aCEBfkSMR.css"},{"revision":"f46d04277a7f4d1ca0a43fa1306f771b","url":"a/aCeF0i5--.js"},{"revision":"58d75d38310ea50714458ba38a189bc7","url":"a/aCevOEJg5.js"},{"revision":"f77f8e8bbf56a49d50718736a04b5bb0","url":"a/aCg3filF1.css"},{"revision":"90bfed1e9abbf0fc96eeec9d6f61cb7d","url":"a/aCH18nfIo.css"},{"revision":"16175143827ef517f533d0893a356e90","url":"a/aCOcPBtEV.js"},{"revision":"262e707fe9c3273a07fddf2c95aaa2f2","url":"a/aCovFy9VH.css"},{"revision":"037e600d5e80b0356ec7e2b5ed72b95b","url":"a/aCpa8lgv9.js"},{"revision":"260f37be6157ca157bae782e0d24386f","url":"a/aCTQBjBt8.js"},{"revision":"c4a331c522f25a2304cdc42d006114fa","url":"a/aCTw-jmLb.js"},{"revision":"87f9291353a9943a127f757f24e85266","url":"a/aCWn1BM4V.css"},{"revision":"b329f6e7d0a2ff61026b221764a3c20c","url":"a/aCwpG9j88.js"},{"revision":"f90c228bbef76ad488e2e72479b6db56","url":"a/aCXobA9i7.css"},{"revision":"4643a49f7bd2752c99f254eb47a00aa6","url":"a/aCYqPgi-1.css"},{"revision":"ca2bd784ba7e0cd26c467691a1ccb644","url":"a/aD-ZPmUXy.js"},{"revision":"919b568e99219a95a924e293da993dd7","url":"a/aDjSJDzG7.css"},{"revision":"3dbb1d840eec83b9058224f859861479","url":"a/aDKwUMAZP.css"},{"revision":"2e89f97c41dd4fb2e3583ad025b95729","url":"a/aDPyk-SwO.js"},{"revision":"21371e9d8b0ab3c7d8887bf855f0ef73","url":"a/aDU96KTZi.css"},{"revision":"0d348c3c28269a4272edf2808b9426da","url":"a/aDxtZpSG-.js"},{"revision":"1eece98c5f06a473daee70f1aeb0affd","url":"a/afGUkjeV7.css"},{"revision":"cc92e9fc38450cc724227bdc34b3e5df","url":"a/aHdDxvcNK.css"},{"revision":"cb50b9f0f10956059c25723d1a6ca035","url":"a/aj6zxmxGs.css"},{"revision":"a15738744e47413a4a70360f1b6c5752","url":"a/alGZkdUfy.js"},{"revision":"65e650af84fd31507b44a45112a9eec7","url":"a/ap6N681fA.js"},{"revision":"bdb0657d9f8e46a59a2ee26ae387923e","url":"a/apvC0EeiA.js"},{"revision":"821ebc0aaec4682c3803388220b68484","url":"a/aPXqqP_6c.js"},{"revision":"2f4d964f684cdf1a8efc8e81ce5097f9","url":"index.html"},{"revision":"38013143dc2183340ede8bc1c5124507","url":"registerSW.js"},{"revision":"72bfc92074c4057ec02457d71234e987","url":"add.svg"},{"revision":"e0bb08e3f2cf3c232c1a6d46d7db219d","url":"icon-192.png"},{"revision":"a3d6bc1ed7d7d3b6fa6fe7bf9dafc4c4","url":"icon-512.png"},{"revision":"63f2a5682e5ac6301a52c8ac2be9bba4","url":"icon-mask.png"},{"revision":"64ff53675e33cb152380233172f621d8","url":"manifest.webmanifest"}]||[],{url:"/build-metadata.json"}],r="0.0.83."+1762023501974,d=async(t,e=3,a=1e3)=>{for(let s=0;s<e;s++)try{const c=await fetch(t);if(!c.ok)throw new Error(`Request failed with status ${c.status}`);return c}catch(c){if(s<e-1)await new Promise(n=>setTimeout(n,a));else throw c}},f=async()=>{const t=await caches.open(r);await Promise.allSettled(w.map(async e=>{if(!e||!e.url)return;const a=new URL(e.url,location.origin);e.revision?a.searchParams.append("__WB_REVISION",e.revision):a.searchParams.append("__WB_CACHE_VERSION",r);const s=await caches.match(a);s?await t.put(a,s.clone()):await t.add(a)}))},m=async()=>{const t=await caches.keys();await Promise.allSettled(t.map(async e=>{r!==e&&await caches.delete(e)}))};let o=!1;self.addEventListener("install",t=>{t.waitUntil((async()=>{o=(await caches.keys()).length===0,f(),o&&self.skipWaiting()})())});self.addEventListener("activate",t=>{t.waitUntil((async()=>{await m(),o&&self.clients.claim()})())});const u=async t=>t.match("/index.html",{ignoreSearch:!0}),p=async t=>{if(t.request.method!=="GET"||!t.request.url.startsWith(self.location.origin))return fetch(t.request);const e=await caches.open(r),{pathname:a}=new URL(t.request.url),s=a==="/"?"/index.html":a,c=await e.match(s,{ignoreSearch:!0});if(c)return c;const n=t.request,l=n.mode==="navigate"||n.headers.get("accept")?.includes("text/html");try{const i=await d(n);return i.status===404&&n.method==="GET"&&l?await u(e)||i:(i.status===200&&await e.put(n,i.clone()),i)}catch(i){if(l){const h=await u(e);if(h)return h}throw i}};self.addEventListener("fetch",t=>{t.respondWith(p(t))});
