const w=[...[{"revision":"6b20b8e612254ea5f10ad8c19c0920fb","url":"a/a1bi7bkrc.js"},{"revision":"919f18f40c852468f212726d06217ebe","url":"a/a9IXuiNER.js"},{"revision":"326167002abe53d14618cc83c32aa2e8","url":"a/a9q_jSmK4.js"},{"revision":"71b760d70cfb38c4fd9b8a5104be2056","url":"a/aB29A_v-K.css"},{"revision":"038dac1dceea2baa3567ebfd19d39e25","url":"a/aB7BBL8Q6.js"},{"revision":"5183df95f403cf3141fa28e421890bdc","url":"a/aBBI8MgAY.css"},{"revision":"b4b8c7e9d540100cf743ca08a946eb96","url":"a/aBEGDcNQV.js"},{"revision":"6814369e506c49dd7deb5d475a4b905f","url":"a/aBem4Ctjp.css"},{"revision":"b62b7409b030f95305c541cbc5550459","url":"a/aBeWFm1o7.css"},{"revision":"a72751e48a520a5c5c85bbd674508893","url":"a/aBgAKudUz.css"},{"revision":"eaca239b66bcec51efc09d4e3bdbf59b","url":"a/aBhtHFOya.css"},{"revision":"640a01f76c2a9f3c8619cf41795ae930","url":"a/aBL56zowi.js"},{"revision":"ef4b2ba57bc225868c338c7cace4cd3b","url":"a/aBo0OsxNp.js"},{"revision":"00023c92f42edae7843242c02e170e3f","url":"a/aBOyuzPJY.js"},{"revision":"d52a02f7643d24b0db263ddb6b8159c8","url":"a/aBrkJtqMH.css"},{"revision":"329916ed5436d539cba777a3ab5b70cd","url":"a/aCaGlrr_o.js"},{"revision":"3decab85dc994ed01c0edcc7d3d42dfa","url":"a/aCdnh5egq.js"},{"revision":"9aaf51ebee267f286ce950f6232385d7","url":"a/aCEBfkSMR.css"},{"revision":"f77f8e8bbf56a49d50718736a04b5bb0","url":"a/aCg3filF1.css"},{"revision":"e7e6b312b3fa9363ab6128e12f596e38","url":"a/aCgHJxpmY.js"},{"revision":"90bfed1e9abbf0fc96eeec9d6f61cb7d","url":"a/aCH18nfIo.css"},{"revision":"262e707fe9c3273a07fddf2c95aaa2f2","url":"a/aCovFy9VH.css"},{"revision":"037e600d5e80b0356ec7e2b5ed72b95b","url":"a/aCpa8lgv9.js"},{"revision":"af0b441ffe86ea057809f4fc9923c943","url":"a/aCQbL0Q4k.js"},{"revision":"931cee821be6b7c74ad1453448c271e1","url":"a/aCvemRh-m.js"},{"revision":"970bb76ea0127d450847c59f70d83486","url":"a/aCveUJ1-C.js"},{"revision":"87f9291353a9943a127f757f24e85266","url":"a/aCWn1BM4V.css"},{"revision":"f90c228bbef76ad488e2e72479b6db56","url":"a/aCXobA9i7.css"},{"revision":"53f22a7e121a73e2aae3d86b38af3ade","url":"a/aCyqodbee.js"},{"revision":"4643a49f7bd2752c99f254eb47a00aa6","url":"a/aCYqPgi-1.css"},{"revision":"17be83f7a7efa43366cce28f82b54bc8","url":"a/aD4yac0Or.js"},{"revision":"30f77c5fa50ec9bd035e03fcc09db40e","url":"a/aDBHj09kw.js"},{"revision":"0a9a4d7c76f14a08a245d832b43c8919","url":"a/aDcW9G5dE.js"},{"revision":"fbfa5456e7b3f80d4cf647171731442b","url":"a/aDD9ju5GM.js"},{"revision":"919b568e99219a95a924e293da993dd7","url":"a/aDjSJDzG7.css"},{"revision":"3ad0366584c36bbe06e692c1f7ea1f04","url":"a/aDk8X6mik.js"},{"revision":"3dbb1d840eec83b9058224f859861479","url":"a/aDKwUMAZP.css"},{"revision":"bdf24980af66caa8b6ad8104bfc7ddfa","url":"a/aDLBBW5I8.js"},{"revision":"21371e9d8b0ab3c7d8887bf855f0ef73","url":"a/aDU96KTZi.css"},{"revision":"c4325525388c719db614d17d607c243e","url":"a/aDWFr0HiM.js"},{"revision":"1eece98c5f06a473daee70f1aeb0affd","url":"a/afGUkjeV7.css"},{"revision":"cc92e9fc38450cc724227bdc34b3e5df","url":"a/aHdDxvcNK.css"},{"revision":"cb50b9f0f10956059c25723d1a6ca035","url":"a/aj6zxmxGs.css"},{"revision":"d59f28b83f766fa09389fcb88bb0d116","url":"a/aJBu2aM9r.js"},{"revision":"dbf2f35522216af04263655b220a63ce","url":"a/aMVWQXZJ5.js"},{"revision":"36224a4ef4b210a3d001dead299fde88","url":"a/aSJlOS_s-.js"},{"revision":"9ae6468e7fd6dbf1ee452a95190df365","url":"a/aSzuT47qF.js"},{"revision":"83bad62ca64c8065064a4300b6c46cf1","url":"a/aujc3vZIG.css"},{"revision":"739be509af5aaad0b73f41e9e1a0fc87","url":"a/awanpkdOK.js"},{"revision":"a9401284fb3110b04bd29cb557e8455e","url":"index.html"},{"revision":"38013143dc2183340ede8bc1c5124507","url":"registerSW.js"},{"revision":"72bfc92074c4057ec02457d71234e987","url":"add.svg"},{"revision":"e0bb08e3f2cf3c232c1a6d46d7db219d","url":"icon-192.png"},{"revision":"a3d6bc1ed7d7d3b6fa6fe7bf9dafc4c4","url":"icon-512.png"},{"revision":"63f2a5682e5ac6301a52c8ac2be9bba4","url":"icon-mask.png"},{"revision":"64ff53675e33cb152380233172f621d8","url":"manifest.webmanifest"}]||[],{url:"/build-metadata.json"}],r="0.0.86."+1762025106505,d=async(t,e=3,a=1e3)=>{for(let s=0;s<e;s++)try{const c=await fetch(t);if(!c.ok)throw new Error(`Request failed with status ${c.status}`);return c}catch(c){if(s<e-1)await new Promise(n=>setTimeout(n,a));else throw c}},f=async()=>{const t=await caches.open(r);await Promise.allSettled(w.map(async e=>{if(!e||!e.url)return;const a=new URL(e.url,location.origin);e.revision?a.searchParams.append("__WB_REVISION",e.revision):a.searchParams.append("__WB_CACHE_VERSION",r);const s=await caches.match(a);s?await t.put(a,s.clone()):await t.add(a)}))},m=async()=>{const t=await caches.keys();await Promise.allSettled(t.map(async e=>{r!==e&&await caches.delete(e)}))};let o=!1;self.addEventListener("install",t=>{t.waitUntil((async()=>{o=(await caches.keys()).length===0,f(),o&&self.skipWaiting()})())});self.addEventListener("activate",t=>{t.waitUntil((async()=>{await m(),o&&self.clients.claim()})())});const u=async t=>t.match("/index.html",{ignoreSearch:!0}),p=async t=>{if(t.request.method!=="GET"||!t.request.url.startsWith(self.location.origin))return fetch(t.request);const e=await caches.open(r),{pathname:a}=new URL(t.request.url),s=a==="/"?"/index.html":a,c=await e.match(s,{ignoreSearch:!0});if(c)return c;const n=t.request,l=n.mode==="navigate"||n.headers.get("accept")?.includes("text/html");try{const i=await d(n);return i.status===404&&n.method==="GET"&&l?await u(e)||i:(i.status===200&&await e.put(n,i.clone()),i)}catch(i){if(l){const h=await u(e);if(h)return h}throw i}};self.addEventListener("fetch",t=>{t.respondWith(p(t))});
