const w=[...[{"revision":"eb4c0a33019673d1fef01fae62cd6322","url":"a/a6pni5Q5w.js"},{"revision":"3fb041d92ecef348a5a943e99c35f6f1","url":"a/a8iD3Tm6k.js"},{"revision":"326167002abe53d14618cc83c32aa2e8","url":"a/a9q_jSmK4.js"},{"revision":"1d4726588e69e2e81a5ae98163313a9e","url":"a/aABtJf1bx.css"},{"revision":"f9ef73fa11c93887acb7668426905b30","url":"a/aB1O3Du4V.js"},{"revision":"71b760d70cfb38c4fd9b8a5104be2056","url":"a/aB29A_v-K.css"},{"revision":"5183df95f403cf3141fa28e421890bdc","url":"a/aBBI8MgAY.css"},{"revision":"c2736fe668625b885925b45b28e87411","url":"a/aBecIJ4d3.js"},{"revision":"b4b8c7e9d540100cf743ca08a946eb96","url":"a/aBEGDcNQV.js"},{"revision":"6814369e506c49dd7deb5d475a4b905f","url":"a/aBem4Ctjp.css"},{"revision":"b62b7409b030f95305c541cbc5550459","url":"a/aBeWFm1o7.css"},{"revision":"a72751e48a520a5c5c85bbd674508893","url":"a/aBgAKudUz.css"},{"revision":"26c894f8049d4d15e25a77c3e20e4966","url":"a/aBHNUUlv5.js"},{"revision":"eaca239b66bcec51efc09d4e3bdbf59b","url":"a/aBhtHFOya.css"},{"revision":"dd72ec1f7a04e957216d9c25d4dc17c4","url":"a/aBmOeAMCz.js"},{"revision":"d52a02f7643d24b0db263ddb6b8159c8","url":"a/aBrkJtqMH.css"},{"revision":"7764bdf2c2b462e0243d665c78d868ed","url":"a/aBtqSxNcn.js"},{"revision":"34adef82e94dd7ecd770a7574e91dc39","url":"a/aC-INMPKG.js"},{"revision":"7f5fefbcdf6a03dc93406559ea9bf73a","url":"a/aC1lEm0tm.js"},{"revision":"eef133a65203dc4d142dda1caf675536","url":"a/aCa23awyZ.js"},{"revision":"9aaf51ebee267f286ce950f6232385d7","url":"a/aCEBfkSMR.css"},{"revision":"f77f8e8bbf56a49d50718736a04b5bb0","url":"a/aCg3filF1.css"},{"revision":"90bfed1e9abbf0fc96eeec9d6f61cb7d","url":"a/aCH18nfIo.css"},{"revision":"6dcb69710bc205d1dd0a7358ed4e55c5","url":"a/aCjy641Bs.js"},{"revision":"f738c6902ca6bba464b1f1178c662173","url":"a/aCMA1EUVx.js"},{"revision":"ff1b52a069d5980b1a57e63071b89da6","url":"a/aCNXTkzNI.js"},{"revision":"415ed1d6f6540009f8e8eee445fbbd44","url":"a/aCO0svt1v.js"},{"revision":"262e707fe9c3273a07fddf2c95aaa2f2","url":"a/aCovFy9VH.css"},{"revision":"037e600d5e80b0356ec7e2b5ed72b95b","url":"a/aCpa8lgv9.js"},{"revision":"656c0729702154f175c561f0d8a18f77","url":"a/aCvNtv2hF.js"},{"revision":"87f9291353a9943a127f757f24e85266","url":"a/aCWn1BM4V.css"},{"revision":"f90c228bbef76ad488e2e72479b6db56","url":"a/aCXobA9i7.css"},{"revision":"7dcbbddb953e5d472371a10fb8b99048","url":"a/aCXq_W9Sn.js"},{"revision":"4643a49f7bd2752c99f254eb47a00aa6","url":"a/aCYqPgi-1.css"},{"revision":"edbd51639b9f482b19bc45f2320a2a69","url":"a/aD8TTUu1-.js"},{"revision":"6f07c9327dc72d69afc87864f05b31c3","url":"a/aDH7iyqca.js"},{"revision":"ca02e875470ab1c72dd348ce1dbffbba","url":"a/aDi4vcIrC.js"},{"revision":"919b568e99219a95a924e293da993dd7","url":"a/aDjSJDzG7.css"},{"revision":"3dbb1d840eec83b9058224f859861479","url":"a/aDKwUMAZP.css"},{"revision":"3fa9c7ab3a993ce8455e3d2f7eee2b88","url":"a/aDOqrVyEU.js"},{"revision":"21371e9d8b0ab3c7d8887bf855f0ef73","url":"a/aDU96KTZi.css"},{"revision":"8f16ffec22889f26053efc2b67bf4f53","url":"a/aDUakbyx0.js"},{"revision":"b17415b4d56b2916e523848be7b3a2a9","url":"a/aDYppKPiO.js"},{"revision":"1eece98c5f06a473daee70f1aeb0affd","url":"a/afGUkjeV7.css"},{"revision":"cc92e9fc38450cc724227bdc34b3e5df","url":"a/aHdDxvcNK.css"},{"revision":"cb50b9f0f10956059c25723d1a6ca035","url":"a/aj6zxmxGs.css"},{"revision":"38e2778a4d9e06d2782878dadbd07863","url":"a/ak0ijdu0A.js"},{"revision":"d535a5387118b6923170b2248ce7d331","url":"a/aPaHtHcX5.js"},{"revision":"2750f44be76bb60b19a06e00b76e81db","url":"a/aXiN8zyOn.js"},{"revision":"b4a7c0c7f73e037416253e1f219dae51","url":"index.html"},{"revision":"38013143dc2183340ede8bc1c5124507","url":"registerSW.js"},{"revision":"72bfc92074c4057ec02457d71234e987","url":"add.svg"},{"revision":"e0bb08e3f2cf3c232c1a6d46d7db219d","url":"icon-192.png"},{"revision":"a3d6bc1ed7d7d3b6fa6fe7bf9dafc4c4","url":"icon-512.png"},{"revision":"63f2a5682e5ac6301a52c8ac2be9bba4","url":"icon-mask.png"},{"revision":"64ff53675e33cb152380233172f621d8","url":"manifest.webmanifest"}]||[],{url:"/build-metadata.json"}],r="0.0.84."+1762023690828,d=async(t,e=3,a=1e3)=>{for(let s=0;s<e;s++)try{const c=await fetch(t);if(!c.ok)throw new Error(`Request failed with status ${c.status}`);return c}catch(c){if(s<e-1)await new Promise(n=>setTimeout(n,a));else throw c}},f=async()=>{const t=await caches.open(r);await Promise.allSettled(w.map(async e=>{if(!e||!e.url)return;const a=new URL(e.url,location.origin);e.revision?a.searchParams.append("__WB_REVISION",e.revision):a.searchParams.append("__WB_CACHE_VERSION",r);const s=await caches.match(a);s?await t.put(a,s.clone()):await t.add(a)}))},m=async()=>{const t=await caches.keys();await Promise.allSettled(t.map(async e=>{r!==e&&await caches.delete(e)}))};let o=!1;self.addEventListener("install",t=>{t.waitUntil((async()=>{o=(await caches.keys()).length===0,f(),o&&self.skipWaiting()})())});self.addEventListener("activate",t=>{t.waitUntil((async()=>{await m(),o&&self.clients.claim()})())});const u=async t=>t.match("/index.html",{ignoreSearch:!0}),p=async t=>{if(t.request.method!=="GET"||!t.request.url.startsWith(self.location.origin))return fetch(t.request);const e=await caches.open(r),{pathname:a}=new URL(t.request.url),s=a==="/"?"/index.html":a,c=await e.match(s,{ignoreSearch:!0});if(c)return c;const n=t.request,l=n.mode==="navigate"||n.headers.get("accept")?.includes("text/html");try{const i=await d(n);return i.status===404&&n.method==="GET"&&l?await u(e)||i:(i.status===200&&await e.put(n,i.clone()),i)}catch(i){if(l){const h=await u(e);if(h)return h}throw i}};self.addEventListener("fetch",t=>{t.respondWith(p(t))});
