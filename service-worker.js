const w=[...[{"revision":"326167002abe53d14618cc83c32aa2e8","url":"a/a9q_jSmK4.js"},{"revision":"9a23daf9d60d61f04f49fb07d732e8ee","url":"a/aAO6dVy3Q.js"},{"revision":"71b760d70cfb38c4fd9b8a5104be2056","url":"a/aB29A_v-K.css"},{"revision":"5183df95f403cf3141fa28e421890bdc","url":"a/aBBI8MgAY.css"},{"revision":"fa23468610d084eaeaee419c85eb4a79","url":"a/aBdtbMQoM.css"},{"revision":"b4b8c7e9d540100cf743ca08a946eb96","url":"a/aBEGDcNQV.js"},{"revision":"6814369e506c49dd7deb5d475a4b905f","url":"a/aBem4Ctjp.css"},{"revision":"b62b7409b030f95305c541cbc5550459","url":"a/aBeWFm1o7.css"},{"revision":"923fc11f9ccb58118764498634722b7d","url":"a/aBfBJyt_m.js"},{"revision":"a72751e48a520a5c5c85bbd674508893","url":"a/aBgAKudUz.css"},{"revision":"eaca239b66bcec51efc09d4e3bdbf59b","url":"a/aBhtHFOya.css"},{"revision":"c9c098e427d21cad25b4a840451fdcae","url":"a/aBobFNS5Z.js"},{"revision":"2bd2621befb2310909a666a651e4befd","url":"a/aBpMEL3zw.js"},{"revision":"d52a02f7643d24b0db263ddb6b8159c8","url":"a/aBrkJtqMH.css"},{"revision":"86ec802d357cd4c662f2a2014c66bf1c","url":"a/aBvqnxF11.js"},{"revision":"aa4b52b7291891d6723df89e9de92c3d","url":"a/aBVzOcfIu.js"},{"revision":"5594ec10f654a7332be6f7bc8107ebbe","url":"a/aBwsFM6o4.js"},{"revision":"2e4433fe23da05f22cd86ce8176e5985","url":"a/aCaTSPTMJ.js"},{"revision":"9aaf51ebee267f286ce950f6232385d7","url":"a/aCEBfkSMR.css"},{"revision":"f77f8e8bbf56a49d50718736a04b5bb0","url":"a/aCg3filF1.css"},{"revision":"90bfed1e9abbf0fc96eeec9d6f61cb7d","url":"a/aCH18nfIo.css"},{"revision":"e884585fcd145df6f7e816d9feb28b39","url":"a/aChc8bNFf.js"},{"revision":"262e707fe9c3273a07fddf2c95aaa2f2","url":"a/aCovFy9VH.css"},{"revision":"037e600d5e80b0356ec7e2b5ed72b95b","url":"a/aCpa8lgv9.js"},{"revision":"0523bf84fcd72c305e8c94c18e27e810","url":"a/aCvpvYUiE.js"},{"revision":"87f9291353a9943a127f757f24e85266","url":"a/aCWn1BM4V.css"},{"revision":"f90c228bbef76ad488e2e72479b6db56","url":"a/aCXobA9i7.css"},{"revision":"4643a49f7bd2752c99f254eb47a00aa6","url":"a/aCYqPgi-1.css"},{"revision":"b83084e1f1c4c9262764ad33c0d3dd84","url":"a/aCZUwJVxU.js"},{"revision":"43a2b34fcf5fda847eed601f02ddd292","url":"a/aD_EpPGgu.js"},{"revision":"4f06618d656ec2fb314a9cc08bdd2052","url":"a/aD7Yuwusr.js"},{"revision":"42435d90652beaf556968b894826b82e","url":"a/aDDig4HoE.js"},{"revision":"95834b048b84702bb93040369b6cdebf","url":"a/aDG-zfldL.js"},{"revision":"9703d372cba41aa0450301a12b1a6a67","url":"a/aDIqf_J-9.js"},{"revision":"919b568e99219a95a924e293da993dd7","url":"a/aDjSJDzG7.css"},{"revision":"3dbb1d840eec83b9058224f859861479","url":"a/aDKwUMAZP.css"},{"revision":"266f83b21b25346d763ab829677799cf","url":"a/aDRcVwCRL.js"},{"revision":"dce985fe980c8354e7b7f09acca7dd77","url":"a/aDRE-cWn5.js"},{"revision":"f53e9cc09102f58ea58004a15f0ff19a","url":"a/aDrTTVp39.js"},{"revision":"21371e9d8b0ab3c7d8887bf855f0ef73","url":"a/aDU96KTZi.css"},{"revision":"6201b0f02c723d855bd785f28a00c7e3","url":"a/aDWTgDiHf.js"},{"revision":"1eece98c5f06a473daee70f1aeb0affd","url":"a/afGUkjeV7.css"},{"revision":"cc92e9fc38450cc724227bdc34b3e5df","url":"a/aHdDxvcNK.css"},{"revision":"b9a98f0f1e8ae644fe5ba3631a2fa55d","url":"a/aIL6nfjrJ.js"},{"revision":"cb50b9f0f10956059c25723d1a6ca035","url":"a/aj6zxmxGs.css"},{"revision":"cc350a75b653a1defcc82945f32efccf","url":"a/amiNdj6FM.js"},{"revision":"1fb221fbfbd907cc933cf32e48eb37b0","url":"a/aoOTwF-0S.js"},{"revision":"0a7c62903b0ac2efae0ba5e013545cb3","url":"a/aPO6zon4f.js"},{"revision":"efb6240afb3645c2d8ee3ac39828a46f","url":"a/asIkhbNTA.js"},{"revision":"5be0cde0c1b1cadf6314f359a3731ac0","url":"index.html"},{"revision":"38013143dc2183340ede8bc1c5124507","url":"registerSW.js"},{"revision":"72bfc92074c4057ec02457d71234e987","url":"add.svg"},{"revision":"e0bb08e3f2cf3c232c1a6d46d7db219d","url":"icon-192.png"},{"revision":"a3d6bc1ed7d7d3b6fa6fe7bf9dafc4c4","url":"icon-512.png"},{"revision":"63f2a5682e5ac6301a52c8ac2be9bba4","url":"icon-mask.png"},{"revision":"64ff53675e33cb152380233172f621d8","url":"manifest.webmanifest"}]||[],{url:"/build-metadata.json"}],r="0.0.90."+1762034379047,d=async(t,e=3,a=1e3)=>{for(let s=0;s<e;s++)try{const c=await fetch(t);if(!c.ok)throw new Error(`Request failed with status ${c.status}`);return c}catch(c){if(s<e-1)await new Promise(n=>setTimeout(n,a));else throw c}},f=async()=>{const t=await caches.open(r);await Promise.allSettled(w.map(async e=>{if(!e||!e.url)return;const a=new URL(e.url,location.origin);e.revision?a.searchParams.append("__WB_REVISION",e.revision):a.searchParams.append("__WB_CACHE_VERSION",r);const s=await caches.match(a);s?await t.put(a,s.clone()):await t.add(a)}))},m=async()=>{const t=await caches.keys();await Promise.allSettled(t.map(async e=>{r!==e&&await caches.delete(e)}))};let o=!1;self.addEventListener("install",t=>{t.waitUntil((async()=>{o=(await caches.keys()).length===0,f(),o&&self.skipWaiting()})())});self.addEventListener("activate",t=>{t.waitUntil((async()=>{await m(),o&&self.clients.claim()})())});const u=async t=>t.match("/index.html",{ignoreSearch:!0}),p=async t=>{if(t.request.method!=="GET"||!t.request.url.startsWith(self.location.origin))return fetch(t.request);const e=await caches.open(r),{pathname:a}=new URL(t.request.url),s=a==="/"?"/index.html":a,c=await e.match(s,{ignoreSearch:!0});if(c)return c;const n=t.request,l=n.mode==="navigate"||n.headers.get("accept")?.includes("text/html");try{const i=await d(n);return i.status===404&&n.method==="GET"&&l?await u(e)||i:(i.status===200&&await e.put(n,i.clone()),i)}catch(i){if(l){const h=await u(e);if(h)return h}throw i}};self.addEventListener("fetch",t=>{t.respondWith(p(t))});
