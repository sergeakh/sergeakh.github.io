const u=[{"revision":"9b081e80d34701601dd1b4aa5244c4de","url":"a/_G2wi80W.js"},{"revision":"d9ca2a5cca7c982111f273854662d4fc","url":"a/0oo6JVe2.js"},{"revision":"0d79f68fac516774d1d01abd17b05e09","url":"a/70bqyQ4Y.css"},{"revision":"326167002abe53d14618cc83c32aa2e8","url":"a/9q_jSmK4.js"},{"revision":"d079e84408d902946d2660029d63b5d9","url":"a/B_UsPGEu.css"},{"revision":"d754f9f8b1556b6ed18a427d45c8c3c4","url":"a/B_Zcg-eh.css"},{"revision":"ea849418907a73cc9c8fa7b70f77bc76","url":"a/B1VnuDAv.js"},{"revision":"9acaa0d2f2863fa7f47e7cf2e0095ae8","url":"a/bA9hIFUQ.js"},{"revision":"ec853626d0a6531be062d3c90ccafcf8","url":"a/BAppOLDX.js"},{"revision":"e8cc674dfff10e541fbac984117a1771","url":"a/BHyEV_dr.js"},{"revision":"719d60d24f28492a7346d2f147edc776","url":"a/Bib31qW-.css"},{"revision":"76863013d0b10fc5f2b38589fcb15d2e","url":"a/BMjxyC5e.css"},{"revision":"6d4b45ab1293a66dea55469d9d2288f5","url":"a/Bmw7pYVm.js"},{"revision":"e3bbbae1a9615a0c12661001bbc97451","url":"a/BMwKOHd1.css"},{"revision":"2e585b72ca298d7499937efd7e0a3020","url":"a/Br15UghP.css"},{"revision":"d11fd4850373f822021224d95023e321","url":"a/Bs6Vrlio.css"},{"revision":"b44321949ee72685e729bec16a1bd258","url":"a/Bz6578xr.js"},{"revision":"2bd7cacbe334cb015f8e407cb8d32a51","url":"a/C-Mx_t1i.css"},{"revision":"a317b5d3202bf791d292fe2a466cf0d2","url":"a/C2VuNxr3.css"},{"revision":"220c4cbdeb3e39fafc57bf9380046bae","url":"a/C4hHpCz9.js"},{"revision":"cdaf595217f7f3db7adcf25c12054d5c","url":"a/CB4JjGKs.js"},{"revision":"dddd98132ce288afac6767c9f68d0f76","url":"a/CioZRAAF.js"},{"revision":"737e085c38d8480c03f059cc43e8c20e","url":"a/CJkK19aw.css"},{"revision":"a88672fa330031cfc3088d876703ced9","url":"a/CmsNSYYP.js"},{"revision":"acde06b325c5ba80c90419516ca62370","url":"a/CNPZQ6s8.js"},{"revision":"037e600d5e80b0356ec7e2b5ed72b95b","url":"a/Cpa8lgv9.js"},{"revision":"b2aa98d8751d8aa8eb92c8672a8504f7","url":"a/CTzb1Nvm.css"},{"revision":"e5e58d8092e0210f70cbf17a864b764c","url":"a/Cw7T0KSN.js"},{"revision":"ad5236e04bb7c36eb60e6456c067d007","url":"a/DaxC3cdO.css"},{"revision":"60c31819c5980078edcb0d67ae7cbd63","url":"a/DdzXYrHR.js"},{"revision":"7e99ac4a63db864dcaa5796adf8eb2d4","url":"a/Df0fAQHq.css"},{"revision":"30e5960e7ea899342065700de9750d82","url":"a/DFtmowdF.js"},{"revision":"812150ba45aed06009736e52b1c3378b","url":"a/DgPIJwnn.css"},{"revision":"dae099cd0a170b3032b18fa84adb9e9b","url":"a/DiZfmIQh.js"},{"revision":"211ea52ff63aac93f258d2b9884cdb9d","url":"a/DJGxTJuX.css"},{"revision":"dceb8f2c1347e5b84a1840ebaa230a0d","url":"a/DksG3DDW.js"},{"revision":"ce6dafa205891fc6f0406d3ed0a89a79","url":"a/DlxBpJjD.css"},{"revision":"dadbae2f84e97438e2c9e82e18970911","url":"a/DoivkJcU.css"},{"revision":"a0f3daa0e695970fa659415809ebef39","url":"a/DU4gj3V-.js"},{"revision":"522de933c5da9b815364ef0eae231fee","url":"a/DwRgL_pk.js"},{"revision":"07d476b38df314b0a3f43cbf37e2f518","url":"a/DWUfwQ_G.css"},{"revision":"4388f23969c58a415ebdecd2eb4a9414","url":"a/DzFJn-EA.js"},{"revision":"b1f1bce21d34e10c1e14926bac570a63","url":"a/EZ_l8VDb.css"},{"revision":"95e92da9771f64fbae9bd7bd886b2152","url":"a/GKJynjgv.css"},{"revision":"c00e895376e04d2f491a9069745fad48","url":"a/hu7yjlv8.css"},{"revision":"80849e2d2700c74c05dead86ab6b931b","url":"a/j0KFa_-O.css"},{"revision":"1dffeda608046e17605071dbb16dcc90","url":"a/JHG4BTeV.js"},{"revision":"06e43ac91ea2ab7541c974f0edf33d95","url":"a/qulSpL0X.js"},{"revision":"cd4b76286ea52b8a7e8ff9bb15a4b93a","url":"a/RStY-q_p.js"},{"revision":"d253d10a9c9aebf584eaba00b943e72f","url":"a/U0nVhO2G.js"},{"revision":"825897f9fbcd14fc7f62b9406a6c0bc5","url":"a/vM51TqPM.js"},{"revision":"24d626097830eca6551baa6fc26aaecc","url":"index.html"},{"revision":"38013143dc2183340ede8bc1c5124507","url":"registerSW.js"},{"revision":"72bfc92074c4057ec02457d71234e987","url":"add.svg"},{"revision":"e0bb08e3f2cf3c232c1a6d46d7db219d","url":"icon-192.png"},{"revision":"a3d6bc1ed7d7d3b6fa6fe7bf9dafc4c4","url":"icon-512.png"},{"revision":"63f2a5682e5ac6301a52c8ac2be9bba4","url":"icon-mask.png"},{"revision":"c45f1205ae6690ef3322397c00dbdf31","url":"manifest.webmanifest"}]||[],i="0.0.34."+1761537447087,f=async(e,t=3,r=1e3)=>{for(let n=0;n<t;n++)try{const c=await fetch(e,{cache:"no-cache"});if(!c.ok)throw console.warn(`Fetch for ${e} returned status ${c.status}`),new Error(`Request failed with status ${c.status}`);return c}catch(c){if(console.warn(`Fetch attempt ${n+1} for ${e} failed:`,c),n<t-1)await new Promise(a=>setTimeout(a,r));else throw c}},d=async()=>{console.log("Precaching files..."),(await caches.open(i)).addAll(u.map(t=>t.url)),console.log("Precaching files succeeded.")},w=async()=>{const e=await caches.keys();await Promise.allSettled(e.map(async t=>{i!==t&&await caches.delete(t)}))};self.addEventListener("install",e=>{e.waitUntil(async()=>{console.log("Service Worker installing...");const t=(await caches.keys()).length;await d(),t===0&&self.skipWaiting(),console.log("Service Worker installed.")})});self.addEventListener("activate",e=>{console.log("Service Worker activating..."),e.waitUntil(w())});const h=async e=>e.match("/index.html",{ignoreSearch:!0}),g=async e=>{if(e.request.method!=="GET")return fetch(e.request);const t=await caches.open(i),{pathname:r}=new URL(e.request.url),n=r==="/"?"/index.html":r,c=await t.match(n,{ignoreSearch:!0});if(c)return c;const a=e.request,o=a.mode==="navigate"||a.headers.get("accept")?.includes("text/html");try{const s=await f(a.url);return s.status===404&&a.method==="GET"&&o?await h(t)||s:(s.status===200&&await t.put(a,s.clone()),s)}catch(s){if(o){const l=await h(t);if(l)return l}throw s}};self.addEventListener("fetch",e=>{e.respondWith(g(e))});
