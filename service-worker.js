const w=[...[{"revision":"c58a02c7d18127a51f286db128ba20c1","url":"a/a_lcok-5Q.js"},{"revision":"17bc81f37fa0185e6815ae4225ada753","url":"a/a4o9lUeAt.js"},{"revision":"326167002abe53d14618cc83c32aa2e8","url":"a/a9q_jSmK4.js"},{"revision":"71b760d70cfb38c4fd9b8a5104be2056","url":"a/aB29A_v-K.css"},{"revision":"a23ead64db96100307f32f37f61a59bf","url":"a/aB2tpFOl_.js"},{"revision":"5183df95f403cf3141fa28e421890bdc","url":"a/aBBI8MgAY.css"},{"revision":"0a4a3119d31b470ad653aba33b8e190b","url":"a/aBbiNSJgk.js"},{"revision":"fa23468610d084eaeaee419c85eb4a79","url":"a/aBdtbMQoM.css"},{"revision":"b4b8c7e9d540100cf743ca08a946eb96","url":"a/aBEGDcNQV.js"},{"revision":"6814369e506c49dd7deb5d475a4b905f","url":"a/aBem4Ctjp.css"},{"revision":"b62b7409b030f95305c541cbc5550459","url":"a/aBeWFm1o7.css"},{"revision":"a72751e48a520a5c5c85bbd674508893","url":"a/aBgAKudUz.css"},{"revision":"eaca239b66bcec51efc09d4e3bdbf59b","url":"a/aBhtHFOya.css"},{"revision":"d52a02f7643d24b0db263ddb6b8159c8","url":"a/aBrkJtqMH.css"},{"revision":"ec28b7dc6bb8e12f6f9584bb80acc1a5","url":"a/aBYXvffeH.js"},{"revision":"9aaf51ebee267f286ce950f6232385d7","url":"a/aCEBfkSMR.css"},{"revision":"f77f8e8bbf56a49d50718736a04b5bb0","url":"a/aCg3filF1.css"},{"revision":"90bfed1e9abbf0fc96eeec9d6f61cb7d","url":"a/aCH18nfIo.css"},{"revision":"68145819ff348e5237422689c4981b3c","url":"a/aCm7c0JPH.js"},{"revision":"240206d0d0f49f9899594af98873c9d9","url":"a/aCo27Oagp.js"},{"revision":"262e707fe9c3273a07fddf2c95aaa2f2","url":"a/aCovFy9VH.css"},{"revision":"037e600d5e80b0356ec7e2b5ed72b95b","url":"a/aCpa8lgv9.js"},{"revision":"acbf0a0e63fff378dbacf699722a804b","url":"a/aCW3Xw_We.js"},{"revision":"87f9291353a9943a127f757f24e85266","url":"a/aCWn1BM4V.css"},{"revision":"673333a4960d7f1ab834e3e02d392042","url":"a/aCwzvyzMB.js"},{"revision":"f90c228bbef76ad488e2e72479b6db56","url":"a/aCXobA9i7.css"},{"revision":"4643a49f7bd2752c99f254eb47a00aa6","url":"a/aCYqPgi-1.css"},{"revision":"58940aa105150daafb36556a34ba7b95","url":"a/aCyUnaO83.js"},{"revision":"209919f282717b008ff997abc4089e1e","url":"a/aD2qgpRn9.js"},{"revision":"0f7badbd5bae24f79e3fededaae75bd1","url":"a/aD6SZgBFG.js"},{"revision":"7b0a709e0fcc4f506e1f8dd7d29ebf99","url":"a/aDbVJoVyq.js"},{"revision":"12249bafed9a5987a906fc07ff9a3ddf","url":"a/aDcR-P7my.js"},{"revision":"b95e09cfffc51ea87b475d58993614c9","url":"a/aDg17cA8x.js"},{"revision":"483f667bd0fb2371dd4cc7fafad626f9","url":"a/aDi_iO0lh.js"},{"revision":"919b568e99219a95a924e293da993dd7","url":"a/aDjSJDzG7.css"},{"revision":"3dbb1d840eec83b9058224f859861479","url":"a/aDKwUMAZP.css"},{"revision":"66e33792426c74a3e2ce3403f7cccca3","url":"a/aDLzYeUJ3.js"},{"revision":"69f36f61a80622c76900d773d2dfbb1d","url":"a/aDqRAB7vI.js"},{"revision":"21371e9d8b0ab3c7d8887bf855f0ef73","url":"a/aDU96KTZi.css"},{"revision":"e2b461dff15934e4ca245d8f3b23d8d3","url":"a/aDuw_bGWz.js"},{"revision":"517735405b10434d5040ee5edd451856","url":"a/aDxfSh4E5.js"},{"revision":"1eece98c5f06a473daee70f1aeb0affd","url":"a/afGUkjeV7.css"},{"revision":"7a8e49f435bb9b189f8bd11e783d679b","url":"a/aGWNu7N-e.js"},{"revision":"cc92e9fc38450cc724227bdc34b3e5df","url":"a/aHdDxvcNK.css"},{"revision":"4b0c00cbfce542cac7204ae2a60a2f25","url":"a/ahWF7mRWU.js"},{"revision":"cb50b9f0f10956059c25723d1a6ca035","url":"a/aj6zxmxGs.css"},{"revision":"94b5d9ed31a8a0eb22a0c1367011abd1","url":"a/aMJKOcbKk.js"},{"revision":"d2e6e5958ec66d9f5c1bd48e5853730e","url":"a/aoPkyHGm9.js"},{"revision":"5673b0d37426e0924ac6bfbcbf989b6c","url":"a/auT5GONba.js"},{"revision":"e1497270bd88759c9a0628e6bf40d6f6","url":"index.html"},{"revision":"38013143dc2183340ede8bc1c5124507","url":"registerSW.js"},{"revision":"72bfc92074c4057ec02457d71234e987","url":"add.svg"},{"revision":"e0bb08e3f2cf3c232c1a6d46d7db219d","url":"icon-192.png"},{"revision":"a3d6bc1ed7d7d3b6fa6fe7bf9dafc4c4","url":"icon-512.png"},{"revision":"63f2a5682e5ac6301a52c8ac2be9bba4","url":"icon-mask.png"},{"revision":"64ff53675e33cb152380233172f621d8","url":"manifest.webmanifest"}]||[],{url:"/build-metadata.json"}],r="0.0.89."+1762033704302,d=async(t,e=3,a=1e3)=>{for(let s=0;s<e;s++)try{const c=await fetch(t);if(!c.ok)throw new Error(`Request failed with status ${c.status}`);return c}catch(c){if(s<e-1)await new Promise(n=>setTimeout(n,a));else throw c}},f=async()=>{const t=await caches.open(r);await Promise.allSettled(w.map(async e=>{if(!e||!e.url)return;const a=new URL(e.url,location.origin);e.revision?a.searchParams.append("__WB_REVISION",e.revision):a.searchParams.append("__WB_CACHE_VERSION",r);const s=await caches.match(a);s?await t.put(a,s.clone()):await t.add(a)}))},m=async()=>{const t=await caches.keys();await Promise.allSettled(t.map(async e=>{r!==e&&await caches.delete(e)}))};let o=!1;self.addEventListener("install",t=>{t.waitUntil((async()=>{o=(await caches.keys()).length===0,f(),o&&self.skipWaiting()})())});self.addEventListener("activate",t=>{t.waitUntil((async()=>{await m(),o&&self.clients.claim()})())});const u=async t=>t.match("/index.html",{ignoreSearch:!0}),p=async t=>{if(t.request.method!=="GET"||!t.request.url.startsWith(self.location.origin))return fetch(t.request);const e=await caches.open(r),{pathname:a}=new URL(t.request.url),s=a==="/"?"/index.html":a,c=await e.match(s,{ignoreSearch:!0});if(c)return c;const n=t.request,l=n.mode==="navigate"||n.headers.get("accept")?.includes("text/html");try{const i=await d(n);return i.status===404&&n.method==="GET"&&l?await u(e)||i:(i.status===200&&await e.put(n,i.clone()),i)}catch(i){if(l){const h=await u(e);if(h)return h}throw i}};self.addEventListener("fetch",t=>{t.respondWith(p(t))});
