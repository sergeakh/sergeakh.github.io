const w=[...[{"revision":"705389b511b82d403f666b9ab57e75f5","url":"a/a3sUOWoz2.js"},{"revision":"326167002abe53d14618cc83c32aa2e8","url":"a/a9q_jSmK4.js"},{"revision":"1d4726588e69e2e81a5ae98163313a9e","url":"a/aABtJf1bx.css"},{"revision":"71b760d70cfb38c4fd9b8a5104be2056","url":"a/aB29A_v-K.css"},{"revision":"70d714e2824441f3cfd5c4858e640238","url":"a/aB5g-F2uR.js"},{"revision":"40c77ea83782b2d4297f211947ddbaa5","url":"a/aBaA3MfhX.js"},{"revision":"5183df95f403cf3141fa28e421890bdc","url":"a/aBBI8MgAY.css"},{"revision":"b4b8c7e9d540100cf743ca08a946eb96","url":"a/aBEGDcNQV.js"},{"revision":"6814369e506c49dd7deb5d475a4b905f","url":"a/aBem4Ctjp.css"},{"revision":"b62b7409b030f95305c541cbc5550459","url":"a/aBeWFm1o7.css"},{"revision":"a72751e48a520a5c5c85bbd674508893","url":"a/aBgAKudUz.css"},{"revision":"83662318056fe0f6abe1b4f32ae302ec","url":"a/aBhCVKtGN.js"},{"revision":"eaca239b66bcec51efc09d4e3bdbf59b","url":"a/aBhtHFOya.css"},{"revision":"e4a4310f3bc55d877ccbc05cece833c4","url":"a/aBj2G_Pqt.js"},{"revision":"8fae108818e542bbe378d905593bcac6","url":"a/aBJ5t8TB6.js"},{"revision":"0e6f8725b9e84bf77893d6b32f1acecd","url":"a/aBR8alZMq.js"},{"revision":"d52a02f7643d24b0db263ddb6b8159c8","url":"a/aBrkJtqMH.css"},{"revision":"571d879bf5eb0955a6a22d3c8b82e262","url":"a/aBU1MjJfq.js"},{"revision":"ea35fd363b96ab835d73574c2d4666d0","url":"a/aBXZ_ibgV.js"},{"revision":"c039ae4f73277d46af9c7efabf35f4dc","url":"a/aC5FGCwfO.js"},{"revision":"9aaf51ebee267f286ce950f6232385d7","url":"a/aCEBfkSMR.css"},{"revision":"f77f8e8bbf56a49d50718736a04b5bb0","url":"a/aCg3filF1.css"},{"revision":"90bfed1e9abbf0fc96eeec9d6f61cb7d","url":"a/aCH18nfIo.css"},{"revision":"88d2d70835fd829c4e366dc85d387206","url":"a/aClWtKxA5.js"},{"revision":"698b52845a599b4383946a0eb74c6551","url":"a/aCmNTb4m7.js"},{"revision":"262e707fe9c3273a07fddf2c95aaa2f2","url":"a/aCovFy9VH.css"},{"revision":"037e600d5e80b0356ec7e2b5ed72b95b","url":"a/aCpa8lgv9.js"},{"revision":"9141d0861c23c90fd7f3a935f18fc8eb","url":"a/aCTcWUFzF.js"},{"revision":"80a01405db2b16c758cc3ed77a869ac5","url":"a/aCVQr1FAB.js"},{"revision":"87f9291353a9943a127f757f24e85266","url":"a/aCWn1BM4V.css"},{"revision":"f90c228bbef76ad488e2e72479b6db56","url":"a/aCXobA9i7.css"},{"revision":"4643a49f7bd2752c99f254eb47a00aa6","url":"a/aCYqPgi-1.css"},{"revision":"216f83b9ee58020a35d660523933807d","url":"a/aD-KcnKPF.js"},{"revision":"9676323a068d90385c343e8502b38fc2","url":"a/aD1BEFJdu.js"},{"revision":"63c1bccc4c6bef7d6f113dd149e26d85","url":"a/aDBFXNp0R.js"},{"revision":"55e573cf0870ce0b43bf1fc493914ce3","url":"a/aDd0l0vf3.js"},{"revision":"ef99b2c781311c7566fa0e4218503dd2","url":"a/aDefRnU32.js"},{"revision":"55391fbf89995fc0b1eb0d9b47a8eb0a","url":"a/aDExTEACX.js"},{"revision":"756f82b5d81445accf41f4ed6b98795d","url":"a/aDHtXiKRW.js"},{"revision":"919b568e99219a95a924e293da993dd7","url":"a/aDjSJDzG7.css"},{"revision":"3dbb1d840eec83b9058224f859861479","url":"a/aDKwUMAZP.css"},{"revision":"21371e9d8b0ab3c7d8887bf855f0ef73","url":"a/aDU96KTZi.css"},{"revision":"9fde44c64dc20bb7bf7f1a749976bad9","url":"a/aDz_9EGZD.js"},{"revision":"32b651fe91c0d442dea1cdff3c7d28ca","url":"a/aEEnoCCpo.js"},{"revision":"1eece98c5f06a473daee70f1aeb0affd","url":"a/afGUkjeV7.css"},{"revision":"cc92e9fc38450cc724227bdc34b3e5df","url":"a/aHdDxvcNK.css"},{"revision":"cb50b9f0f10956059c25723d1a6ca035","url":"a/aj6zxmxGs.css"},{"revision":"2c041323ec55e4a473c41f968a67b1cc","url":"a/aUKm73eOD.js"},{"revision":"47df891de0ecb90753a4f3c012fbfe27","url":"a/azM6d4K0L.js"},{"revision":"c66c5ace49973be16f0b25209c564432","url":"index.html"},{"revision":"38013143dc2183340ede8bc1c5124507","url":"registerSW.js"},{"revision":"72bfc92074c4057ec02457d71234e987","url":"add.svg"},{"revision":"e0bb08e3f2cf3c232c1a6d46d7db219d","url":"icon-192.png"},{"revision":"a3d6bc1ed7d7d3b6fa6fe7bf9dafc4c4","url":"icon-512.png"},{"revision":"63f2a5682e5ac6301a52c8ac2be9bba4","url":"icon-mask.png"},{"revision":"64ff53675e33cb152380233172f621d8","url":"manifest.webmanifest"}]||[],{url:"/build-metadata.json"}],r="0.0.82."+1762022783685,d=async(t,e=3,a=1e3)=>{for(let s=0;s<e;s++)try{const c=await fetch(t);if(!c.ok)throw new Error(`Request failed with status ${c.status}`);return c}catch(c){if(s<e-1)await new Promise(n=>setTimeout(n,a));else throw c}},f=async()=>{const t=await caches.open(r);await Promise.allSettled(w.map(async e=>{if(!e||!e.url)return;const a=new URL(e.url,location.origin);e.revision?a.searchParams.append("__WB_REVISION",e.revision):a.searchParams.append("__WB_CACHE_VERSION",r);const s=await caches.match(a);s?await t.put(a,s.clone()):await t.add(a)}))},m=async()=>{const t=await caches.keys();await Promise.allSettled(t.map(async e=>{r!==e&&await caches.delete(e)}))};let o=!1;self.addEventListener("install",t=>{t.waitUntil((async()=>{o=(await caches.keys()).length===0,f(),o&&self.skipWaiting()})())});self.addEventListener("activate",t=>{t.waitUntil((async()=>{await m(),o&&self.clients.claim()})())});const u=async t=>t.match("/index.html",{ignoreSearch:!0}),p=async t=>{if(t.request.method!=="GET"||!t.request.url.startsWith(self.location.origin))return fetch(t.request);const e=await caches.open(r),{pathname:a}=new URL(t.request.url),s=a==="/"?"/index.html":a,c=await e.match(s,{ignoreSearch:!0});if(c)return c;const n=t.request,l=n.mode==="navigate"||n.headers.get("accept")?.includes("text/html");try{const i=await d(n);return i.status===404&&n.method==="GET"&&l?await u(e)||i:(i.status===200&&await e.put(n,i.clone()),i)}catch(i){if(l){const h=await u(e);if(h)return h}throw i}};self.addEventListener("fetch",t=>{t.respondWith(p(t))});
