const w=[...[{"revision":"326167002abe53d14618cc83c32aa2e8","url":"a/a9q_jSmK4.js"},{"revision":"1d4726588e69e2e81a5ae98163313a9e","url":"a/aABtJf1bx.css"},{"revision":"be20ce7fbda7667e7b297bbc7cacf734","url":"a/aB0_P3MSW.js"},{"revision":"71b760d70cfb38c4fd9b8a5104be2056","url":"a/aB29A_v-K.css"},{"revision":"2d6bff0d4dc4ac182ee399994ec2dd69","url":"a/aB4GujTUX.js"},{"revision":"5183df95f403cf3141fa28e421890bdc","url":"a/aBBI8MgAY.css"},{"revision":"b4b8c7e9d540100cf743ca08a946eb96","url":"a/aBEGDcNQV.js"},{"revision":"6814369e506c49dd7deb5d475a4b905f","url":"a/aBem4Ctjp.css"},{"revision":"b62b7409b030f95305c541cbc5550459","url":"a/aBeWFm1o7.css"},{"revision":"a72751e48a520a5c5c85bbd674508893","url":"a/aBgAKudUz.css"},{"revision":"eaca239b66bcec51efc09d4e3bdbf59b","url":"a/aBhtHFOya.css"},{"revision":"d52a02f7643d24b0db263ddb6b8159c8","url":"a/aBrkJtqMH.css"},{"revision":"7cab04c631ed854e197b43db1d6e9c88","url":"a/aCbQio34u.js"},{"revision":"9aaf51ebee267f286ce950f6232385d7","url":"a/aCEBfkSMR.css"},{"revision":"f10eae731c50dcfe5f3547b8b0e0854d","url":"a/aCF4BknOF.js"},{"revision":"f77f8e8bbf56a49d50718736a04b5bb0","url":"a/aCg3filF1.css"},{"revision":"90bfed1e9abbf0fc96eeec9d6f61cb7d","url":"a/aCH18nfIo.css"},{"revision":"236c25e4854e95af2eb3da1eb7776724","url":"a/aCJ3KEouD.js"},{"revision":"262e707fe9c3273a07fddf2c95aaa2f2","url":"a/aCovFy9VH.css"},{"revision":"4df12965b047aa5bb5f059c00bab9657","url":"a/aCP3_af9e.js"},{"revision":"037e600d5e80b0356ec7e2b5ed72b95b","url":"a/aCpa8lgv9.js"},{"revision":"9b2b5c194f52f4fb97a2234aef4869f2","url":"a/aCqpocHFH.js"},{"revision":"f291e1b19f99615dbce49d7a7a7a5e85","url":"a/aCsicv8bk.js"},{"revision":"87f9291353a9943a127f757f24e85266","url":"a/aCWn1BM4V.css"},{"revision":"f90c228bbef76ad488e2e72479b6db56","url":"a/aCXobA9i7.css"},{"revision":"4643a49f7bd2752c99f254eb47a00aa6","url":"a/aCYqPgi-1.css"},{"revision":"71da21865010e1b61b968c70e4def9f6","url":"a/aCzyCCctP.js"},{"revision":"8748790c765a8f7bf4c7c163568cbcbf","url":"a/aD_vnu-zZ.js"},{"revision":"790fc7f39db568c3c100b181e374f084","url":"a/aD1EJGAdJ.js"},{"revision":"95f3ebd34f2da1de48c10d6e51898b17","url":"a/aDA6IcOeR.js"},{"revision":"924c4a749d7ae615dccc8593466224fc","url":"a/aDE_Dz53_.js"},{"revision":"b0e634944de520293feb053c2eca06f5","url":"a/aDHzTiBds.js"},{"revision":"7975f280c13923df3bd0654d57afbc1e","url":"a/aDJbjSRzb.js"},{"revision":"919b568e99219a95a924e293da993dd7","url":"a/aDjSJDzG7.css"},{"revision":"3dbb1d840eec83b9058224f859861479","url":"a/aDKwUMAZP.css"},{"revision":"48ceb7fbc21eef6d87534c8ce30a022e","url":"a/aDNUToCHP.js"},{"revision":"4bb39f373f18284d15985fb87efa4866","url":"a/aDOcstq4Z.js"},{"revision":"791e730f6179bb3bf3510d9402672d66","url":"a/aDqMoaCXp.js"},{"revision":"9c6104972662248b157b0043ca33fee6","url":"a/aDqXoIKph.js"},{"revision":"21371e9d8b0ab3c7d8887bf855f0ef73","url":"a/aDU96KTZi.css"},{"revision":"cb082c1c5dcfc920d3610420988b610a","url":"a/aDX3lO1mn.js"},{"revision":"1eece98c5f06a473daee70f1aeb0affd","url":"a/afGUkjeV7.css"},{"revision":"cc92e9fc38450cc724227bdc34b3e5df","url":"a/aHdDxvcNK.css"},{"revision":"9985f5b70cf068756f2d60ee54dc3f6f","url":"a/aHsAsHH5E.js"},{"revision":"ebabfb94f7bb0c28a9c6184619a0ac1a","url":"a/aiBF0tGAS.js"},{"revision":"cb50b9f0f10956059c25723d1a6ca035","url":"a/aj6zxmxGs.css"},{"revision":"e943d402f6c63bd758ea5421fc496133","url":"a/aj8aoCY_i.js"},{"revision":"8f1d9e827bd55211532de791953616d0","url":"a/anGbhgp1t.js"},{"revision":"a6ce0838f4ad8b580290fdb90eae6d17","url":"a/apTHTOv1U.js"},{"revision":"c92b1d51821b5660d2b08e7f2d85036e","url":"index.html"},{"revision":"38013143dc2183340ede8bc1c5124507","url":"registerSW.js"},{"revision":"72bfc92074c4057ec02457d71234e987","url":"add.svg"},{"revision":"e0bb08e3f2cf3c232c1a6d46d7db219d","url":"icon-192.png"},{"revision":"a3d6bc1ed7d7d3b6fa6fe7bf9dafc4c4","url":"icon-512.png"},{"revision":"63f2a5682e5ac6301a52c8ac2be9bba4","url":"icon-mask.png"},{"revision":"64ff53675e33cb152380233172f621d8","url":"manifest.webmanifest"}]||[],{url:"/build-metadata.json"}],r="0.0.80."+1762009817204,d=async(t,e=3,a=1e3)=>{for(let s=0;s<e;s++)try{const c=await fetch(t);if(!c.ok)throw new Error(`Request failed with status ${c.status}`);return c}catch(c){if(s<e-1)await new Promise(n=>setTimeout(n,a));else throw c}},f=async()=>{const t=await caches.open(r);await Promise.allSettled(w.map(async e=>{if(!e||!e.url)return;const a=new URL(e.url,location.origin);e.revision?a.searchParams.append("__WB_REVISION",e.revision):a.searchParams.append("__WB_CACHE_VERSION",r);const s=await caches.match(a);s?await t.put(a,s.clone()):await t.add(a)}))},m=async()=>{const t=await caches.keys();await Promise.allSettled(t.map(async e=>{r!==e&&await caches.delete(e)}))};let o=!1;self.addEventListener("install",t=>{t.waitUntil((async()=>{o=(await caches.keys()).length===0,f(),o&&self.skipWaiting()})())});self.addEventListener("activate",t=>{t.waitUntil((async()=>{await m(),o&&self.clients.claim()})())});const u=async t=>t.match("/index.html",{ignoreSearch:!0}),p=async t=>{if(t.request.method!=="GET"||!t.request.url.startsWith(self.location.origin))return fetch(t.request);const e=await caches.open(r),{pathname:a}=new URL(t.request.url),s=a==="/"?"/index.html":a,c=await e.match(s,{ignoreSearch:!0});if(c)return c;const n=t.request,l=n.mode==="navigate"||n.headers.get("accept")?.includes("text/html");try{const i=await d(n);return i.status===404&&n.method==="GET"&&l?await u(e)||i:(i.status===200&&await e.put(n,i.clone()),i)}catch(i){if(l){const h=await u(e);if(h)return h}throw i}};self.addEventListener("fetch",t=>{t.respondWith(p(t))});
