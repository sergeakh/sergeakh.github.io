const u=[{"revision":"47be0401e96af0b88bffe00fa12a52db","url":"a/04azVQx9.js"},{"revision":"e4374324527c9912a8225c9b765d0279","url":"a/585TnfOe.js"},{"revision":"0d79f68fac516774d1d01abd17b05e09","url":"a/70bqyQ4Y.css"},{"revision":"326167002abe53d14618cc83c32aa2e8","url":"a/9q_jSmK4.js"},{"revision":"d079e84408d902946d2660029d63b5d9","url":"a/B_UsPGEu.css"},{"revision":"d754f9f8b1556b6ed18a427d45c8c3c4","url":"a/B_Zcg-eh.css"},{"revision":"13f2443cb5102ee08e43c4bb544b53a9","url":"a/B7F1g_7B.js"},{"revision":"9acaa0d2f2863fa7f47e7cf2e0095ae8","url":"a/bA9hIFUQ.js"},{"revision":"0d992699d97efaf3ede1441cf8d3fe65","url":"a/Be_0BPDQ.js"},{"revision":"719d60d24f28492a7346d2f147edc776","url":"a/Bib31qW-.css"},{"revision":"58401fec89f0cb69db03cb70a0bb7844","url":"a/BM1lRF85.js"},{"revision":"76863013d0b10fc5f2b38589fcb15d2e","url":"a/BMjxyC5e.css"},{"revision":"e3bbbae1a9615a0c12661001bbc97451","url":"a/BMwKOHd1.css"},{"revision":"a51cf4b36d9a3aefc9c9b8778caf5743","url":"a/BQX70gIL.js"},{"revision":"2e585b72ca298d7499937efd7e0a3020","url":"a/Br15UghP.css"},{"revision":"d11fd4850373f822021224d95023e321","url":"a/Bs6Vrlio.css"},{"revision":"b91ef809f0b439e030e60157cc25223d","url":"a/BT-9teCG.js"},{"revision":"d9efe7c1d689941bed3590b6629652d8","url":"a/BtYnZejx.js"},{"revision":"b1d843f0da4b20e29eb4879124d1279c","url":"a/C_wxj1Kq.js"},{"revision":"2bd7cacbe334cb015f8e407cb8d32a51","url":"a/C-Mx_t1i.css"},{"revision":"a317b5d3202bf791d292fe2a466cf0d2","url":"a/C2VuNxr3.css"},{"revision":"c797da1ee9c22a4c21c56d26c00968c1","url":"a/CCHZOcw1.js"},{"revision":"cbc0284f560cb7764b92156a20cba160","url":"a/CcYSEqFi.js"},{"revision":"068bcad6c613c5a6f6fb9633da193da3","url":"a/CixiSuVc.js"},{"revision":"737e085c38d8480c03f059cc43e8c20e","url":"a/CJkK19aw.css"},{"revision":"4c72b3041e8cb77dbc05e97f4f5b9680","url":"a/CldSpO42.js"},{"revision":"be15f507025787c4dd4817c376bdc41e","url":"a/CMcDNEXF.js"},{"revision":"f3b6cc13187a9397d12bfaddfc3523c5","url":"a/Cp6nQfOz.js"},{"revision":"037e600d5e80b0356ec7e2b5ed72b95b","url":"a/Cpa8lgv9.js"},{"revision":"b2aa98d8751d8aa8eb92c8672a8504f7","url":"a/CTzb1Nvm.css"},{"revision":"d297ab2c95b399ebf8b143bd3bff3700","url":"a/Cuq88a51.js"},{"revision":"ad5236e04bb7c36eb60e6456c067d007","url":"a/DaxC3cdO.css"},{"revision":"5310d2e0e827586262e09342189d7b11","url":"a/DciGD8eI.js"},{"revision":"7e99ac4a63db864dcaa5796adf8eb2d4","url":"a/Df0fAQHq.css"},{"revision":"7a95c91251f65792cef34c3feb3d9f96","url":"a/DGD3r7SY.js"},{"revision":"812150ba45aed06009736e52b1c3378b","url":"a/DgPIJwnn.css"},{"revision":"8a97b2d1d5850b2a0ebf8b2a939520c2","url":"a/DGw91zqa.js"},{"revision":"211ea52ff63aac93f258d2b9884cdb9d","url":"a/DJGxTJuX.css"},{"revision":"ce6dafa205891fc6f0406d3ed0a89a79","url":"a/DlxBpJjD.css"},{"revision":"7c8aff11fdec8496825eba6b535ad783","url":"a/DMH2T0ww.js"},{"revision":"e92c8fa6d5f56b7c04921198f6c010ad","url":"a/DmVHQokS.js"},{"revision":"a78f5174415cc311193f26b22f82545b","url":"a/dohP8mAC.js"},{"revision":"dadbae2f84e97438e2c9e82e18970911","url":"a/DoivkJcU.css"},{"revision":"07d476b38df314b0a3f43cbf37e2f518","url":"a/DWUfwQ_G.css"},{"revision":"59564dea3a2f30216811beb1667c7ce4","url":"a/DyQ2yYl4.js"},{"revision":"b1f1bce21d34e10c1e14926bac570a63","url":"a/EZ_l8VDb.css"},{"revision":"95e92da9771f64fbae9bd7bd886b2152","url":"a/GKJynjgv.css"},{"revision":"c00e895376e04d2f491a9069745fad48","url":"a/hu7yjlv8.css"},{"revision":"80849e2d2700c74c05dead86ab6b931b","url":"a/j0KFa_-O.css"},{"revision":"8ee29d89d7102596ee3851f077425013","url":"a/nYwduUdy.js"},{"revision":"144db0bbfd31410ce8352f30134c8b07","url":"a/SdMwh2qE.js"},{"revision":"c2be39288c247f38f252a190d63c63e8","url":"index.html"},{"revision":"38013143dc2183340ede8bc1c5124507","url":"registerSW.js"},{"revision":"72bfc92074c4057ec02457d71234e987","url":"add.svg"},{"revision":"e0bb08e3f2cf3c232c1a6d46d7db219d","url":"icon-192.png"},{"revision":"a3d6bc1ed7d7d3b6fa6fe7bf9dafc4c4","url":"icon-512.png"},{"revision":"63f2a5682e5ac6301a52c8ac2be9bba4","url":"icon-mask.png"},{"revision":"c45f1205ae6690ef3322397c00dbdf31","url":"manifest.webmanifest"}]||[],o="0.0.34."+1761537695157,f=async(e,t=3,r=1e3)=>{for(let n=0;n<t;n++)try{const c=await fetch(e,{cache:"no-cache"});if(!c.ok)throw console.warn(`Fetch for ${e} returned status ${c.status}`),new Error(`Request failed with status ${c.status}`);return c}catch(c){if(console.warn(`Fetch attempt ${n+1} for ${e} failed:`,c),n<t-1)await new Promise(a=>setTimeout(a,r));else throw c}},d=async()=>{console.log("Precaching files..."),(await caches.open(o)).addAll(u.map(t=>t.url)),console.log("Precaching files succeeded.")},w=async()=>{const e=await caches.keys();await Promise.allSettled(e.map(async t=>{o!==t&&await caches.delete(t)}))};self.addEventListener("install",e=>{console.log("Service Worker installing...1"),e.waitUntil(async()=>{console.log("Service Worker installing...2");const t=(await caches.keys()).length;await d(),t===0&&self.skipWaiting(),console.log("Service Worker installed.")})});self.addEventListener("activate",e=>{console.log("Service Worker activating..."),e.waitUntil(w())});const h=async e=>e.match("/index.html",{ignoreSearch:!0}),g=async e=>{if(e.request.method!=="GET")return fetch(e.request);const t=await caches.open(o),{pathname:r}=new URL(e.request.url),n=r==="/"?"/index.html":r,c=await t.match(n,{ignoreSearch:!0});if(c)return c;const a=e.request,i=a.mode==="navigate"||a.headers.get("accept")?.includes("text/html");try{const s=await f(a.url);return s.status===404&&a.method==="GET"&&i?await h(t)||s:(s.status===200&&await t.put(a,s.clone()),s)}catch(s){if(i){const l=await h(t);if(l)return l}throw s}};self.addEventListener("fetch",e=>{e.respondWith(g(e))});
