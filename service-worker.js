const w=[...[{"revision":"7b29f7e2bd35177a6040abf57a269ca4","url":"a/a7cAvnc2I.js"},{"revision":"326167002abe53d14618cc83c32aa2e8","url":"a/a9q_jSmK4.js"},{"revision":"1d4726588e69e2e81a5ae98163313a9e","url":"a/aABtJf1bx.css"},{"revision":"71b760d70cfb38c4fd9b8a5104be2056","url":"a/aB29A_v-K.css"},{"revision":"5183df95f403cf3141fa28e421890bdc","url":"a/aBBI8MgAY.css"},{"revision":"b91f3c8cb011426fe9fd2791c0fb6cdd","url":"a/aBcYptWTn.js"},{"revision":"3e9bd8c4ae5a7c565e11a7c9498d77a1","url":"a/aBEbrpMff.js"},{"revision":"b4b8c7e9d540100cf743ca08a946eb96","url":"a/aBEGDcNQV.js"},{"revision":"6814369e506c49dd7deb5d475a4b905f","url":"a/aBem4Ctjp.css"},{"revision":"b62b7409b030f95305c541cbc5550459","url":"a/aBeWFm1o7.css"},{"revision":"3c602c9e5e653003affae5adeaa0ab77","url":"a/aBFrbIK8Y.js"},{"revision":"a72751e48a520a5c5c85bbd674508893","url":"a/aBgAKudUz.css"},{"revision":"eaca239b66bcec51efc09d4e3bdbf59b","url":"a/aBhtHFOya.css"},{"revision":"64ba2e2658cf55773201f8a11d3c445d","url":"a/aBIbtnwey.js"},{"revision":"40be66db36619a8e6827a819aa62f3a5","url":"a/aBjZRSOGQ.js"},{"revision":"ede8d4b8170db0afe967937ac09e771d","url":"a/aBmrN0OYr.js"},{"revision":"d52a02f7643d24b0db263ddb6b8159c8","url":"a/aBrkJtqMH.css"},{"revision":"b7c9cfde3b0b0df9185e8cf0cb99541c","url":"a/aBVUawh_A.js"},{"revision":"d8a43053488c7dc3b00f8421e8ab6e6d","url":"a/aBYl-PRGc.js"},{"revision":"3d86e860185d4506531686d45c29d100","url":"a/aC6L1nFT-.js"},{"revision":"ef0e65347437bebc406be76c5116e695","url":"a/aCBZK80DC.js"},{"revision":"1f2b29fa5dde7ec35c76f73db0c79403","url":"a/aCcuLf-zO.js"},{"revision":"9aaf51ebee267f286ce950f6232385d7","url":"a/aCEBfkSMR.css"},{"revision":"2570e8d1de172c92f99e50040562d368","url":"a/aCFvb6GjE.js"},{"revision":"5a7ae09d8ae20fa2cdae71f19c014a21","url":"a/aCFwQnZka.js"},{"revision":"f77f8e8bbf56a49d50718736a04b5bb0","url":"a/aCg3filF1.css"},{"revision":"90bfed1e9abbf0fc96eeec9d6f61cb7d","url":"a/aCH18nfIo.css"},{"revision":"262e707fe9c3273a07fddf2c95aaa2f2","url":"a/aCovFy9VH.css"},{"revision":"037e600d5e80b0356ec7e2b5ed72b95b","url":"a/aCpa8lgv9.js"},{"revision":"adc20ce376001964b0acf5deb16c441a","url":"a/aCq37fMEL.js"},{"revision":"87f9291353a9943a127f757f24e85266","url":"a/aCWn1BM4V.css"},{"revision":"f90c228bbef76ad488e2e72479b6db56","url":"a/aCXobA9i7.css"},{"revision":"4643a49f7bd2752c99f254eb47a00aa6","url":"a/aCYqPgi-1.css"},{"revision":"683bb3a44bf52b7fb809373fc7f0c33a","url":"a/aD6onsG1R.js"},{"revision":"fc82c56010be62012505124498df4067","url":"a/aDIn92jsu.js"},{"revision":"919b568e99219a95a924e293da993dd7","url":"a/aDjSJDzG7.css"},{"revision":"3dbb1d840eec83b9058224f859861479","url":"a/aDKwUMAZP.css"},{"revision":"bda87d224d24aef01db9fa819b513220","url":"a/aDmXkb2Aj.js"},{"revision":"477de8ac1c69ccef8d4035565f12d515","url":"a/aDpTGaVOM.js"},{"revision":"21371e9d8b0ab3c7d8887bf855f0ef73","url":"a/aDU96KTZi.css"},{"revision":"1eece98c5f06a473daee70f1aeb0affd","url":"a/afGUkjeV7.css"},{"revision":"cc92e9fc38450cc724227bdc34b3e5df","url":"a/aHdDxvcNK.css"},{"revision":"cb50b9f0f10956059c25723d1a6ca035","url":"a/aj6zxmxGs.css"},{"revision":"cf38f3f4983bdb73425dba8ad69c12cc","url":"a/ajZEblrw-.js"},{"revision":"3bb0054fbeb7d6483e847a7a4bef884c","url":"a/aT-3M1_EX.js"},{"revision":"1baf9bcda9f6d7113910c79f2502c1d1","url":"a/atIsX0Zs4.js"},{"revision":"cb7bdb5ce79f6e31cd583e9fd23f5080","url":"a/auXRrlzCX.js"},{"revision":"a4c15698f0faf447c1334d4e2a592f5a","url":"a/ayf-c8xi7.js"},{"revision":"e9db8a2960c193e058cb266d1ea6071b","url":"a/aZErxeWnv.js"},{"revision":"dc028ba2f74f1f16a06ea19a83b93103","url":"index.html"},{"revision":"38013143dc2183340ede8bc1c5124507","url":"registerSW.js"},{"revision":"72bfc92074c4057ec02457d71234e987","url":"add.svg"},{"revision":"e0bb08e3f2cf3c232c1a6d46d7db219d","url":"icon-192.png"},{"revision":"a3d6bc1ed7d7d3b6fa6fe7bf9dafc4c4","url":"icon-512.png"},{"revision":"63f2a5682e5ac6301a52c8ac2be9bba4","url":"icon-mask.png"},{"revision":"64ff53675e33cb152380233172f621d8","url":"manifest.webmanifest"}]||[],{url:"/build-metadata.json"}],r="0.0.70."+1761979649239,d=async(t,e=3,a=1e3)=>{for(let s=0;s<e;s++)try{const c=await fetch(t);if(!c.ok)throw new Error(`Request failed with status ${c.status}`);return c}catch(c){if(s<e-1)await new Promise(n=>setTimeout(n,a));else throw c}},f=async()=>{const t=await caches.open(r);await Promise.allSettled(w.map(async e=>{if(!e||!e.url)return;const a=new URL(e.url,location.origin);e.revision?a.searchParams.append("__WB_REVISION",e.revision):a.searchParams.append("__WB_CACHE_VERSION",r);const s=await caches.match(a);s?await t.put(a,s.clone()):await t.add(a)}))},m=async()=>{const t=await caches.keys();await Promise.allSettled(t.map(async e=>{r!==e&&await caches.delete(e)}))};let o=!1;self.addEventListener("install",t=>{t.waitUntil((async()=>{o=(await caches.keys()).length===0,f(),o&&self.skipWaiting()})())});self.addEventListener("activate",t=>{t.waitUntil((async()=>{await m(),o&&self.clients.claim()})())});const u=async t=>t.match("/index.html",{ignoreSearch:!0}),p=async t=>{if(t.request.method!=="GET"||!t.request.url.startsWith(self.location.origin))return fetch(t.request);const e=await caches.open(r),{pathname:a}=new URL(t.request.url),s=a==="/"?"/index.html":a,c=await e.match(s,{ignoreSearch:!0});if(c)return c;const n=t.request,l=n.mode==="navigate"||n.headers.get("accept")?.includes("text/html");try{const i=await d(n);return i.status===404&&n.method==="GET"&&l?await u(e)||i:(i.status===200&&await e.put(n,i.clone()),i)}catch(i){if(l){const h=await u(e);if(h)return h}throw i}};self.addEventListener("fetch",t=>{t.respondWith(p(t))});
